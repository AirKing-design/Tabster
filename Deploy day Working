<!DOCTYPE html>
<html lang="en" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BarSoko - AI Powered POS</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        /* Base Styles & Variables */
        :root {
            --brand-blue: #3b82f6;
            --brand-blue-dark: #2563eb;
            --gray-900: #111827;
            --gray-800: #1f2937;
            --gray-700: #374151;
            --gray-600: #4b5563;
            --gray-400: #9ca3af;
            --gray-200: #e5e7eb;
            --text-light: #f9fafb;
            --text-dark: #1f2937;
        }
        body {
            font-family: 'Inter', sans-serif;
            scroll-behavior: smooth;
            background-color: var(--gray-900);
        }
        /* Accessibility: Universal Focus Ring */
        *:focus-visible {
            outline: 3px solid var(--brand-blue);
            outline-offset: 2px;
            border-radius: 0.375rem; /* 6px */
        }
        .modal-backdrop { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.7); display: flex; justify-content: center; align-items: center; z-index: 1000; backdrop-filter: blur(4px); }
        .modal-content { background-color: var(--gray-800); padding: 2rem; border-radius: 0.75rem; width: 90%; max-width: 500px; box-shadow: 0 20px 25px -5px rgba(0,0,0,0.3), 0 10px 10px -5px rgba(0,0,0,0.1); border: 1px solid var(--gray-700); }
        .hidden { display: none; }

        /* Login Screen Polish */
        .login-card {
            background-color: rgba(31, 41, 55, 0.8); /* bg-gray-800 with opacity */
            backdrop-filter: blur(8px);
            border: 1px solid var(--gray-700);
            transition: all 0.3s ease-in-out;
        }
        .login-tab {
            cursor: pointer;
            padding: 0.75rem 1rem;
            border-bottom: 3px solid transparent;
            color: var(--gray-400);
            transition: all 0.2s ease-in-out;
        }
        .login-tab:hover { color: var(--text-light); }
        .login-tab.active { color: var(--brand-blue); border-bottom-color: var(--brand-blue); font-weight: 600; }
        .form-section { display: none; }
        .form-section.active { display: block; }

        /* General App Polish */
        .tab-btn { padding: 0.5rem 1rem; border: none; background: none; cursor: pointer; font-weight: 500; color: var(--gray-400); border-bottom: 2px solid transparent; transition: all 0.2s ease-in-out; }
        .tab-btn:hover { color: var(--text-light); }
        .tab-btn.active { border-bottom-color: var(--brand-blue); color: var(--brand-blue); font-weight: 600; }
        .category-btn.active { background-color: var(--brand-blue); color: white; font-weight: 600; border-color: var(--brand-blue-dark); }

        .product-card:active {
            transform: scale(0.97);
            border-color: var(--brand-blue);
        }
        /* Report Section UI/UX Fixes */
        .report-btn { transition: all 0.2s ease-in-out; }
        .report-btn:active { transform: translateY(1px); filter: brightness(90%); }
        .report-btn:disabled { cursor: not-allowed; opacity: 0.5; }

        #report-output-container {
            transition: all 0.3s ease-in-out;
        }
        #report-output .grid {
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        }
        #report-output table tbody tr:nth-child(even) {
            background-color: rgba(55, 65, 81, 0.5); /* bg-gray-700 with opacity */
        }
        #report-output .stat-card {
            background-color: var(--gray-900);
            border: 1px solid var(--gray-700);
            border-radius: 0.75rem;
            padding: 1rem;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .ai-bar { background: linear-gradient(135deg, #1e3a8a, #3b82f6); }
        @media print {
            body * { visibility: hidden; }
            #print-area, #print-area * { visibility: visible; }
            #print-area { display: block !important; position: absolute; left: 0; top: 0; width: 100%; }
            .modal-backdrop, #app, #login-screen, #report-print-controls { display: none !important; visibility: hidden !important; }
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-200 text-base">
    <!-- LOGIN SCREEN -->
    <div id="login-screen" class="min-h-screen flex flex-col md:flex-row items-center justify-center p-4 bg-gray-900 bg-cover bg-center" style="background-image: linear-gradient(rgba(17, 24, 39, 0.8), rgba(17, 24, 39, 0.95)), url('https://images.unsplash.com/photo-1514933651103-005eec06c04b?q=80&w=2574&auto=format&fit=crop');">
        <div class="w-full max-w-6xl mx-auto grid md:grid-cols-2 gap-16 items-center">
            <div class="text-center md:text-left">
                <h1 class="text-5xl md:text-6xl font-extrabold text-white">
                    <i class="fas fa-wine-glass-alt text-blue-500"></i> BarSoko
                </h1>
                <p class="mt-4 text-xl md:text-2xl text-gray-300">The Smart Point of Sale for Modern Joints.</p>
                <div id="firestore-status" class="mt-4 text-center md:text-left text-sm font-semibold py-2 px-4 rounded-lg inline-block">Connecting...</div>
            </div>
            <div class="login-card w-full max-w-md p-8 rounded-xl shadow-2xl">
                <div class="flex border-b border-gray-700 mb-6">
                    <div id="admin-login-tab" class="login-tab active flex-1 text-center">Admin Login</div>
                    <div id="signup-tab" class="login-tab flex-1 text-center">Sign Up</div>
                    <div id="waiter-login-tab" class="login-tab flex-1 text-center">Waiter</div>
                </div>
                <div id="admin-login-form-section" class="form-section active">
                    <form id="admin-login-form" class="space-y-6">
                        <h2 class="text-2xl font-bold text-center text-white">Admin Sign In</h2>
                        <div>
                            <label for="admin-email" class="block text-sm font-medium text-gray-300">Email Address</label>
                            <input type="email" id="admin-email" autocomplete="email" required class="mt-1 block w-full border border-gray-600 bg-gray-700 rounded-md shadow-sm p-3 text-lg text-gray-200 focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div>
                            <label for="admin-password" class="block text-sm font-medium text-gray-300">Password</label>
                            <input type="password" id="admin-password" autocomplete="current-password" required class="mt-1 block w-full border border-gray-600 bg-gray-700 rounded-md shadow-sm p-3 text-lg text-gray-200 focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <button type="button" id="google-admin-signin-btn" class="w-full bg-white text-gray-700 font-semibold py-3 rounded-lg border border-gray-300 hover:bg-gray-100 transition flex items-center justify-center">
                            <img src="https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg" class="h-6 mr-3" alt="Google logo">
                            Sign In with Google
                        </button>
                        <div class="my-4 flex items-center">
                            <hr class="w-full border-gray-600"><span class="px-2 text-gray-400 text-sm">OR</span><hr class="w-full border-gray-600">
                        </div>
                        <p id="admin-login-error" class="text-red-400 text-sm hidden" aria-live="assertive"></p>
                        <button type="submit" class="w-full bg-blue-600 text-white py-3 rounded-lg text-lg font-semibold hover:bg-blue-700 transition">Sign In</button>
                        <div class="text-sm text-center">
                            <a href="#" id="forgot-password-link" class="font-medium text-blue-400 hover:text-blue-300">Forgot password?</a>
                        </div>
                    </form>
                </div>
                <div id="signup-form-section" class="form-section">
                    <form id="signup-form" class="space-y-4">
                        <h2 class="text-2xl font-bold text-center text-white">Create Your Business Account</h2>
                        <div>
                            <label for="signup-business-name" class="block text-sm font-medium text-gray-300">Business Name</label>
                            <input type="text" id="signup-business-name" required class="mt-1 block w-full border border-gray-600 bg-gray-700 rounded-md shadow-sm p-3 text-lg text-gray-200 focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div>
                            <label for="signup-admin-name" class="block text-sm font-medium text-gray-300">Your Full Name (Admin)</label>
                            <input type="text" id="signup-admin-name" required class="mt-1 block w-full border border-gray-600 bg-gray-700 rounded-md shadow-sm p-3 text-lg text-gray-200 focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div>
                            <label for="signup-email" class="block text-sm font-medium text-gray-300">Your Email Address</label>
                            <input type="email" id="signup-email" autocomplete="email" required class="mt-1 block w-full border border-gray-600 bg-gray-700 rounded-md shadow-sm p-3 text-lg text-gray-200 focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div>
                            <label for="signup-password" class="block text-sm font-medium text-gray-300">Create Password</label>
                            <input type="password" id="signup-password" autocomplete="new-password" required class="mt-1 block w-full border border-gray-600 bg-gray-700 rounded-md shadow-sm p-3 text-lg text-gray-200 focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <button type="button" id="google-signup-btn" class="w-full bg-white text-gray-700 font-semibold py-3 rounded-lg border border-gray-300 hover:bg-gray-100 transition flex items-center justify-center">
                            <img src="https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg" class="h-6 mr-3" alt="Google logo">
                            Sign Up with Google
                        </button>
                        <div class="my-4 flex items-center">
                            <hr class="w-full border-gray-600"><span class="px-2 text-gray-400 text-sm">OR</span><hr class="w-full border-gray-600">
                        </div>
                        <p id="signup-error" class="text-red-400 text-sm hidden" aria-live="assertive"></p>
                        <button type="submit" class="w-full bg-green-600 text-white py-3 rounded-lg text-lg font-semibold hover:bg-green-700 transition">Create Account</button>
                    </form>
                </div>
                <div id="waiter-login-form-section" class="form-section">
                    <form id="waiter-login-form" class="space-y-6">
                        <h2 class="text-2xl font-bold text-center text-white">Waiter Sign In</h2>
                        <div>
                            <label for="waiter-business-id" class="block text-sm font-medium text-gray-300">Business ID</label>
                            <input type="text" id="waiter-business-id" required class="mt-1 block w-full border border-gray-600 bg-gray-700 rounded-md shadow-sm p-3 text-lg text-gray-200 focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div>
                            <label for="waiter-username" class="block text-sm font-medium text-gray-300">Select Your Name</label>
                            <select id="waiter-username" required class="mt-1 block w-full border border-gray-600 bg-gray-700 rounded-md shadow-sm p-3 text-lg text-gray-200 focus:ring-blue-500 focus:border-blue-500" disabled>
                                <option>Enter Business ID first</option>
                            </select>
                        </div>
                        <div>
                            <label for="waiter-password" class="block text-sm font-medium text-gray-300">Password / PIN</label>
                            <input type="password" id="waiter-password" required class="mt-1 block w-full border border-gray-600 bg-gray-700 rounded-md shadow-sm p-3 text-lg text-gray-200 focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <p id="waiter-login-error" class="text-red-400 text-sm hidden" aria-live="assertive">Invalid details.</p>
                        <button type="submit" class="w-full bg-purple-600 text-white py-3 rounded-lg text-lg font-semibold hover:bg-purple-700 transition">Sign In</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <!-- Main App (Initially Hidden) -->
    <div id="app" class="max-w-7xl mx-auto p-4 hidden">
        <header class="bg-gray-800 rounded-lg shadow p-4 mb-4 flex flex-wrap justify-between items-center gap-4">
            <div>
                <h1 id="business-name-header" class="text-2xl font-bold text-gray-100">BarSoko POS</h1>
                <p id="user-info" class="text-sm text-gray-400">Welcome!</p>
            </div>
            <div class="flex items-center space-x-2 sm:space-x-4">
                <div id="online-status-indicator" class="flex items-center space-x-2"></div>
                <button id="logout-btn" aria-label="Log out" class="bg-red-500 text-white px-4 py-2 rounded-lg shadow hover:bg-red-600 transition flex items-center space-x-2">
                    <i class="fas fa-sign-out-alt"></i>
                    <span class="hidden sm:inline">Logout</span>
                </button>
            </div>
        </header>

        <div id="ai-insights-bar" class="ai-bar p-4 rounded-lg mb-4 flex items-center gap-4 hidden">
            <i class="fas fa-brain text-3xl text-white opacity-80"></i>
            <div>
                <h3 class="font-bold text-white">Soko AI Insights</h3>
                <p id="ai-insight-text" class="text-sm text-blue-100">Generate a report to get AI-powered business insights.</p>
            </div>
        </div>
        <main class="grid grid-cols-1 lg:grid-cols-3 gap-4">
            <div class="lg:col-span-2 space-y-4">
                <section aria-labelledby="open-bills-heading" class="bg-gray-800 rounded-lg shadow p-6">
                    <h2 id="open-bills-heading" class="text-xl font-semibold mb-4 text-gray-100">Open Bills</h2>
                    <div id="open-bills-container" class="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 gap-3"></div>
                </section>
                <section aria-labelledby="pos-heading" class="bg-gray-800 rounded-lg shadow p-6">
                    <div class="flex justify-between items-center mb-4">
                        <h2 id="pos-heading" class="text-xl font-semibold text-gray-100">Point of Sale</h2>
                        <div id="current-bill-info" class="text-lg font-bold text-blue-400"></div>
                    </div>
                    <div id="product-categories" class="flex flex-wrap gap-2 mb-4"></div>
                    <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4" id="product-grid" role="grid"></div>
                    <hr class="my-6 border-gray-700">
                    <h3 class="text-lg font-semibold mb-4 text-gray-100">Current Order</h3>
                    <div id="cart" class="space-y-2"></div>
                    <div id="cart-summary" class="mt-6 pt-4 border-t-2 border-dashed border-gray-700">
                        <div class="flex justify-between items-center text-2xl font-bold">
                            <span id="total-label">Total:</span><span id="cart-total">Ksh 0.00</span>
                        </div>
                        <div class="mt-4 grid grid-cols-2 lg:grid-cols-4 gap-4">
                            <button id="save-bill-btn" class="bg-orange-500 text-white py-3 rounded-lg text-lg font-semibold hover:bg-orange-600 transition disabled:bg-gray-400" disabled><i class="fas fa-save mr-2"></i>Save</button>
                            <button id="pay-cash-btn" class="bg-green-600 text-white py-3 rounded-lg text-lg font-semibold hover:bg-green-700 transition disabled:bg-gray-400" disabled><i class="fas fa-money-bill-wave mr-2"></i>Cash</button>
                            <button id="pay-mpesa-btn" class="bg-emerald-500 text-white py-3 rounded-lg text-lg font-semibold hover:bg-emerald-600 transition disabled:bg-gray-400 flex items-center justify-center" disabled><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/15/M-PESA_LOGO-01.svg/1280px-M-PESA_LOGO-01.svg.png" class="h-5 mr-2" alt="M-Pesa"> M-Pesa</button>
                            <button id="pay-card-btn" class="bg-blue-600 text-white py-3 rounded-lg text-lg font-semibold hover:bg-blue-700 transition disabled:bg-gray-400" disabled><i class="fas fa-credit-card mr-2"></i>Card</button>
                        </div>
                        <div class="mt-2 grid grid-cols-2 gap-4">
                            <button id="clear-cart-btn" class="w-full bg-red-500 text-white py-2 rounded-lg hover:bg-red-600 transition disabled:bg-gray-400" disabled>Clear/Close Bill</button>
                            <button id="print-bill-btn" class="w-full bg-gray-500 text-white py-2 rounded-lg hover:bg-gray-600 transition disabled:bg-gray-400" disabled><i class="fas fa-print mr-2"></i>Print Bill</button>
                        </div>
                    </div>
                </section>
            </div>
            <aside class="bg-gray-800 rounded-lg shadow p-6">
                <div id="shift-management-panel" class="bg-gray-700/50 p-4 rounded-lg mb-6"></div>
                <div class="mb-6">
                    <nav id="tabs" role="tablist" aria-label="Management Tabs"></nav>
                </div>
                <!-- Tab Panels -->
                <div id="tab-content-dashboard" role="tabpanel" class="mt-6 hidden"></div>
                <div id="tab-content-products" role="tabpanel" class="mt-6 hidden">
                    <form id="add-product-form" class="space-y-4">
                        <div><label for="product-name" class="block text-sm font-medium text-gray-300">Product Name</label><input type="text" id="product-name" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600 rounded-md" required></div>
                        <div><label for="product-price" class="block text-sm font-medium text-gray-300">Price (Ksh)</label><input type="number" id="product-price" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600 rounded-md" required min="0"></div>
                        <div>
                            <label for="product-category" class="block text-sm font-medium text-gray-300">Category</label>
                            <select id="product-category" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600 rounded-md"></select>
                        </div>
                        <div><label for="product-stock" class="block text-sm font-medium text-gray-300">Initial Stock</label><input type="number" id="product-stock" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600 rounded-md" required min="0"></div>
                        <button type="submit" class="w-full bg-blue-600 text-white py-2 rounded-lg shadow hover:bg-blue-700 transition">Add Product</button>
                    </form>
                    <hr class="my-6 border-gray-600">
                    <h3 class="font-semibold text-gray-200 mb-2">Existing Products</h3>
                    <div id="product-list-management" class="space-y-2"></div>
                </div>
                <div id="tab-content-my-sales" role="tabpanel" class="mt-6 hidden"></div>
                <div id="tab-content-all-sales" role="tabpanel" class="mt-6 hidden"></div>
                <div id="tab-content-reports" role="tabpanel" class="mt-6 hidden">
                    <div class="space-y-6">
                        <div>
                            <h3 class="text-lg font-semibold text-gray-200 mb-3 border-b border-gray-700 pb-2">Sales Reports</h3>
                            <div class="space-y-4">
                                <div class="flex flex-wrap gap-2">
                                    <button data-range="daily" class="report-btn flex-1 bg-gray-700 text-white py-2 px-4 rounded-lg shadow hover:bg-gray-600">Daily</button>
                                    <button data-range="90days" class="report-btn flex-1 bg-gray-700 text-white py-2 px-4 rounded-lg shadow hover:bg-gray-600">Last 90 Days</button>
                                </div>
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <label for="report-start-date" class="block text-sm font-medium text-gray-300">Start Date</label>
                                        <input type="date" id="report-start-date" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600 rounded-md">
                                    </div>
                                    <div>
                                        <label for="report-end-date" class="block text-sm font-medium text-gray-300">End Date</label>
                                        <input type="date" id="report-end-date" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600 rounded-md">
                                    </div>
                                </div>
                                <button id="generate-report-btn" class="report-btn w-full bg-blue-600 text-white py-2 px-4 rounded-lg shadow hover:bg-blue-700 flex items-center justify-center">
                                    <i class="fas fa-cogs mr-2"></i> Generate Custom Report
                                </button>
                            </div>
                            <div id="report-feedback" class="text-center p-2 rounded-md my-4 hidden" aria-live="polite"></div>
                            <div id="download-options" class="flex flex-col sm:flex-row gap-2 hidden">
                                <button id="download-summary-btn" class="report-btn flex-1 bg-green-600 text-white py-2 px-4 rounded-lg shadow hover:bg-green-700 flex items-center justify-center">
                                    <i class="fas fa-file-alt mr-2"></i> Download Summary
                                </button>
                                <button id="download-full-btn" class="report-btn flex-1 bg-teal-600 text-white py-2 px-4 rounded-lg shadow hover:bg-teal-700 flex items-center justify-center">
                                    <i class="fas fa-file-csv mr-2"></i> Download Full Report
                                </button>
                                <button id="print-report-btn" class="report-btn flex-1 bg-gray-500 text-white py-2 px-4 rounded-lg shadow hover:bg-gray-600 flex items-center justify-center">
                                    <i class="fas fa-print mr-2"></i> Print Summary
                                </button>
                            </div>
                        </div>
                        <hr class="my-4 border-gray-600">
                        <div id="report-output-container" class="bg-gray-900/50 p-4 rounded-lg">
                            <h4 class="text-lg font-semibold mb-2">Report Results</h4>
                            <div id="report-output" class="text-gray-300">Select a date range and generate a report to see results.</div>
                        </div>
                    </div>
                </div>
                <div id="tab-content-waiters" role="tabpanel" class="mt-6 hidden">
                    <button id="add-user-btn" class="w-full bg-blue-600 text-white py-2 rounded-lg shadow hover:bg-blue-700 transition">Add New Waiter</button>
                    <hr class="my-6 border-gray-600">
                    <div id="user-list-management" class="space-y-2"></div>
                </div>
                <div id="tab-content-categories" role="tabpanel" class="mt-6 hidden">
                    <form id="add-category-form" class="space-y-4">
                        <div><label for="category-name" class="block text-sm font-medium text-gray-300">New Category Name</label><input type="text" id="category-name" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600 rounded-md" required></div>
                        <button type="submit" class="w-full bg-blue-600 text-white py-2 rounded-lg shadow hover:bg-blue-700 transition">Add Category</button>
                    </form>
                    <hr class="my-6 border-gray-600">
                    <h3 class="font-semibold text-gray-200 mb-2">Existing Categories</h3>
                    <div id="category-list-management" class="space-y-2"></div>
                </div>
                <div id="tab-content-settings" role="tabpanel" class="mt-6 hidden">
                    <div class="space-y-6">
                        <section aria-labelledby="subscription-heading">
                            <h3 id="subscription-heading" class="text-lg font-semibold text-gray-200 mb-3 border-b border-gray-700 pb-2">Manage Subscription</h3>
                            <div class="bg-gray-700/50 p-4 rounded-lg space-y-4">
                                <div>
                                    <p class="text-sm font-medium text-gray-300">Current Status</p>
                                    <p id="subscription-status-display" class="text-lg font-semibold text-green-400">1-Month Free Trial</p>
                                </div>

                                <div>
                                    <p class="text-sm font-medium text-gray-300">Choose Your Plan</p>
                                    <div class="mt-2 grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <button id="monthly-plan-btn" class="text-left p-4 border-2 border-gray-600 rounded-lg hover:border-blue-500 focus:border-blue-500">
                                            <h4 class="font-bold text-white">Monthly Plan</h4>
                                            <p class="text-xl font-bold text-blue-400">Ksh 1,000 / month</p>
                                            <p class="text-xs text-gray-400">Billed monthly.</p>
                                        </button>
                                        <button id="yearly-plan-btn" class="text-left p-4 border-2 border-gray-600 rounded-lg hover:border-blue-500 focus:border-blue-500">
                                            <h4 class="font-bold text-white">Yearly Plan</h4>
                                            <p class="text-xl font-bold text-blue-400">Ksh 10,000 / year</p>
                                            <p class="text-xs text-green-400">Save 2 months! Best value.</p>
                                        </button>
                                    </div>
                                </div>
                                <div id="payment-form-container" class="hidden pt-4 border-t border-gray-600">
                                    <h4 class="font-semibold text-white mb-2">Confirm Payment</h4>
                                    <div>
                                        <label for="payment-mpesa-number" class="block text-sm font-medium text-gray-300">M-PESA Phone Number</label>
                                        <input type="tel" id="payment-mpesa-number" placeholder="e.g., 254712345678" class="mt-1 block w-full border p-2 bg-gray-900 border-gray-600 rounded-md">
                                    </div>
                                    <button id="pay-now-btn" class="mt-4 w-full bg-green-600 text-white py-2 rounded-lg shadow hover:bg-green-700 transition">Pay Now</button>
                                </div>
                            </div>
                        </section>
                        <section aria-labelledby="security-heading">
                            <h3 id="security-heading" class="text-lg font-semibold text-gray-200 mb-3 border-b border-gray-700 pb-2">Security</h3>
                            <button id="change-my-password-btn" class="w-full bg-gray-700 text-white py-2 rounded-lg shadow hover:bg-gray-600 transition">Change My Password</button>
                        </section>
                        <section aria-labelledby="business-heading" id="business-settings-section">
                            <h3 id="business-heading" class="text-lg font-semibold text-gray-200 mb-3 border-b border-gray-700 pb-2">Business Setup</h3>
                            <div class="space-y-4">
                                <div id="business-id-display" class="p-3 bg-gray-700/50 rounded-md">
                                    <label class="block text-sm font-medium text-gray-300">Your Business ID</label>
                                    <p class="text-lg font-mono text-blue-400 break-words"></p>
                                    <small class="text-gray-400">Share this ID with your waiters to allow them to log in.</small>
                                </div>
                                <div>
                                    <label for="business-name" class="block text-sm font-medium text-gray-300">Business Name</label>
                                    <input type="text" id="business-name" placeholder="e.g., The Watering Hole" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600 rounded-md">
                                </div>
                                <div>
                                    <label for="mpesa-till" class="block text-sm font-medium text-gray-300">M-PESA Till Number</label>
                                    <input type="text" id="mpesa-till" placeholder="e.g., 123456" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600 rounded-md">
                                    <p id="till-error" class="text-red-500 text-sm mt-1 hidden" aria-live="assertive"></p>
                                </div>
                                <button id="save-settings-btn" class="w-full bg-blue-600 text-white py-2 rounded-lg shadow hover:bg-blue-700 transition mt-2">Save Settings</button>
                            </div>
                        </section>
                        <section aria-labelledby="data-heading" id="data-management-section">
                            <h3 id="data-heading" class="text-lg font-semibold text-red-400 mb-3 border-b border-red-800 pb-2">Danger Zone</h3>
                            <p class="text-sm text-gray-400 mb-3">These actions are permanent and cannot be undone. They will affect all users.</p>
                            <button id="clear-transactions-btn" class="w-full bg-red-800 text-white py-2 rounded-lg shadow hover:bg-red-900 transition">Clear All Sales Data</button>
                        </section>
                    </div>
                </div>
            </aside>
        </main>
    </div>
    <!-- General Purpose Modal -->
    <div id="modal" class="modal-backdrop hidden" role="dialog" aria-modal="true" aria-labelledby="modal-title">
        <div class="modal-content">
            <h2 id="modal-title" class="text-xl font-bold mb-4 text-gray-100">Modal Title</h2>
            <div id="modal-body"><p>Modal content goes here.</p></div>
            <div id="modal-footer" class="mt-6 flex justify-end space-x-4">
                <button id="modal-close-btn-dynamic" class="bg-gray-600 text-gray-200 font-semibold py-2 px-4 rounded-lg hover:bg-gray-500">Close</button>
                <button id="modal-confirm-btn-dynamic" class="bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700">Confirm</button>
            </div>
        </div>
    </div>

    <!-- Print Preview Modal -->
    <div id="print-preview-modal" class="modal-backdrop hidden">
        <div class="modal-content">
            <h2 class="text-xl font-bold mb-4 text-gray-100">Print Preview</h2>
            <div id="print-preview-area" class="bg-white p-4 border rounded-md overflow-y-auto max-h-96">
                <!-- Receipt content will be injected here -->
            </div>
            <div class="mt-6 flex justify-end space-x-4">
                <button id="print-preview-close" class="bg-gray-600 text-gray-200 font-semibold py-2 px-4 rounded-lg hover:bg-gray-500">Cancel</button>
                <button id="print-preview-copy" class="bg-yellow-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-yellow-600">Print Copy</button>
                <button id="print-preview-final" class="bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700">Print Original</button>
            </div>
        </div>
    </div>
    <!-- Hidden Print Area -->
    <div id="print-area" class="hidden"></div>
    <!-- Firebase SDK -->
    <script type="module">
        // --- IMPORTS ---
        import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.1/firebase-app.js";
        import { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, sendPasswordResetEmail, signOut, onAuthStateChanged, GoogleAuthProvider, signInWithPopup } from "https://www.gstatic.com/firebasejs/9.22.1/firebase-auth.js";
        import { getFirestore, collection, onSnapshot, doc, getDoc, setDoc, addDoc, updateDoc, deleteDoc, writeBatch, query, where, serverTimestamp, enableMultiTabIndexedDbPersistence, deleteField, getDocs } from "https://www.gstatic.com/firebasejs/9.22.1/firebase-firestore.js";
        // ADD THIS LINE
        import { getFunctions, httpsCallable } from "https://www.gstatic.com/firebasejs/9.22.1/firebase-functions.js";

        // --- CONFIGURATION ---
        const firebaseConfig = {
            apiKey: "AIzaSyAy7yTBeqFL0uDcl_TS2Yc2wpOPwIlkKFU",
  authDomain: "tabster-8cb20.firebaseapp.com",
  projectId: "tabster-8cb20",
  storageBucket: "tabster-8cb20.firebasestorage.app",
  messagingSenderId: "751758784879",
  appId: "1:751758784879:web:e2226d9d3b541d5402509a",
  measurementId: "G-57R8RLN0D2"
        };

        // --- INITIALIZATION ---
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        // --- GLOBAL STATE ---
        window.state = {
            products: [],
            sales: [],
            openBills: [],
            settings: { businessName: 'BarSoko POS', mpesaTill: '' },
            users: [],
            categories: [],
            shifts: [],
            currentUser: null,
            currentBillId: null,
            cart: [],
            generatedReport: null,
            pendingSales: [],
            // Add a simple rate limiting object
            loginAttempts: new Map(), // Stores { email: { count: N, lastAttempt: timestamp } }
        };

        // --- DOM ELEMENTS (unchanged) ---
        const loginScreen = document.getElementById('login-screen');
        const appDiv = document.getElementById('app');

        const adminLoginTab = document.getElementById('admin-login-tab');
        const signupTab = document.getElementById('signup-tab');
        const waiterLoginTab = document.getElementById('waiter-login-tab');
        const adminLoginFormSection = document.getElementById('admin-login-form-section');
        const signupFormSection = document.getElementById('signup-form-section');
        const waiterLoginFormSection = document.getElementById('waiter-login-form-section');

        const adminLoginForm = document.getElementById('admin-login-form');
        const signupForm = document.getElementById('signup-form');
        const waiterLoginForm = document.getElementById('waiter-login-form');
        const forgotPasswordLink = document.getElementById('forgot-password-link');

        const logoutBtn = document.getElementById('logout-btn');
        const firestoreStatusDiv = document.getElementById('firestore-status');
        const modal = document.getElementById('modal');
        const modalTitle = document.getElementById('modal-title');
        const modalBody = document.getElementById('modal-body');
        const modalFooter = document.getElementById('modal-footer');
        const userInfo = document.getElementById('user-info');
        const businessNameHeader = document.getElementById('business-name-header');
        const onlineStatusIndicator = document.getElementById('online-status-indicator');
        const openBillsContainer = document.getElementById('open-bills-container');
        const productCategoriesNav = document.getElementById('product-categories');
        const productGrid = document.getElementById('product-grid');
        const cartDiv = document.getElementById('cart');
        const cartTotalSpan = document.getElementById('cart-total');
        const currentBillInfo = document.getElementById('current-bill-info');
        const payCashBtn = document.getElementById('pay-cash-btn');
        const payMpesaBtn = document.getElementById('pay-mpesa-btn');
        const payCardBtn = document.getElementById('pay-card-btn');
        const saveBillBtn = document.getElementById('save-bill-btn');
        const clearCartBtn = document.getElementById('clear-cart-btn');
        const printBillBtn = document.getElementById('print-bill-btn');
        const shiftManagementPanel = document.getElementById('shift-management-panel');
        const tabsContainer = document.getElementById('tabs');
        const tabContents = {
            dashboard: document.getElementById('tab-content-dashboard'),
            products: document.getElementById('tab-content-products'),
            'my-sales': document.getElementById('tab-content-my-sales'),
            'all-sales': document.getElementById('tab-content-all-sales'),
            reports: document.getElementById('tab-content-reports'),
            waiters: document.getElementById('tab-content-waiters'),
            categories: document.getElementById('tab-content-categories'),
            settings: document.getElementById('tab-content-settings'),
        };
        const productListManagement = document.getElementById('product-list-management');
        const userListManagement = document.getElementById('user-list-management');
        const categoryListManagement = document.getElementById('category-list-management');
        const printPreviewModal = document.getElementById('print-preview-modal');
        const printPreviewArea = document.getElementById('print-preview-area');
        const printArea = document.getElementById('print-area');
        const aiInsightsBar = document.getElementById('ai-insights-bar');
        const aiInsightText = document.getElementById('ai-insight-text');

        // Report Section Elements
        const generateReportBtn = document.getElementById('generate-report-btn');
        const downloadOptions = document.getElementById('download-options');
        const downloadSummaryBtn = document.getElementById('download-summary-btn');
        const downloadFullBtn = document.getElementById('download-full-btn');
        const printReportBtn = document.getElementById('print-report-btn');
        const reportFeedbackDiv = document.getElementById('report-feedback');
        const reportOutputDiv = document.getElementById('report-output');
        // Subscription elements
        const monthlyPlanBtn = document.getElementById('monthly-plan-btn');
        const yearlyPlanBtn = document.getElementById('yearly-plan-btn');
        const paymentFormContainer = document.getElementById('payment-form-container');
        const payNowBtn = document.getElementById('pay-now-btn');
        const paymentMpesaNumberInput = document.getElementById('payment-mpesa-number');


        // --- UTILITY FUNCTIONS ---
        // Helper to sanitize input strings to prevent XSS
        function sanitizeInput(text) {
            const div = document.createElement('div');
            div.appendChild(document.createTextNode(text));
            return div.innerHTML;
        }

        // Helper to show user-friendly error messages
        function showUserError(elementId, message) {
            const errorP = document.getElementById(elementId);
            if (errorP) {
                errorP.textContent = message;
                errorP.classList.remove('hidden');
                setTimeout(() => errorP.classList.add('hidden'), 5000); // Hide after 5 seconds
            }
        }

        // --- RATE LIMITING ---
        const MAX_LOGIN_ATTEMPTS = 5;
        const LOGIN_COOLDOWN_MS = 60 * 1000; // 1 minute

        function checkRateLimit(identifier) {
            const attempts = window.state.loginAttempts.get(identifier);
            const now = Date.now();

            if (!attempts) {
                window.state.loginAttempts.set(identifier, { count: 1, lastAttempt: now });
                return true;
            }

            if (now - attempts.lastAttempt > LOGIN_COOLDOWN_MS) {
                // Cooldown period passed, reset attempts
                window.state.loginAttempts.set(identifier, { count: 1, lastAttempt: now });
                return true;
            }

            if (attempts.count >= MAX_LOGIN_ATTEMPTS) {
                return false; // Rate limited
            }

            attempts.count++;
            attempts.lastAttempt = now;
            window.state.loginAttempts.set(identifier, attempts);
            return true;
        }


        // --- OFFLINE FIX: PENDING SALES QUEUE MANAGEMENT ---
        function savePendingSalesToLocal() {
            if (!window.state.currentUser) return;
            try {
                const pendingSalesData = JSON.stringify(window.state.pendingSales);
                localStorage.setItem(`pendingSales_${window.state.currentUser.businessId}`, pendingSalesData);
                console.log(`${window.state.pendingSales.length} pending sales saved locally.`);
            } catch (e) {
                console.error("Could not save pending sales to localStorage:", e);
            }
            updateOnlineStatus();
        }

        function loadPendingSalesFromLocal() {
            if (!window.state.currentUser) return;
            try {
                const pendingSalesData = localStorage.getItem(`pendingSales_${window.state.currentUser.businessId}`);
                if (pendingSalesData) {
                    window.state.pendingSales = JSON.parse(pendingSalesData);
                    console.log(`Loaded ${window.state.pendingSales.length} pending sales from localStorage.`);
                }
            } catch (e) {
                console.error("Could not load pending sales from localStorage:", e);
                window.state.pendingSales = [];
            }
            updateOnlineStatus();
        }

        async function syncPendingSales(db) {
            if (!navigator.onLine || window.state.pendingSales.length === 0) {
                console.log("Sync skipped: App is offline or no pending sales.");
                return;
            }
            console.log(`Starting sync of ${window.state.pendingSales.length} pending sales...`);
            showModal('Syncing...', `Attempting to sync ${window.state.pendingSales.length} offline sale(s). Please wait.`, () => {}, false);

            const salesToSync = [...window.state.pendingSales];
            window.state.pendingSales = []; // Clear current pending sales, they'll be re-added if sync fails
            savePendingSalesToLocal();

            for (const sale of salesToSync) {
                try {
                    const batch = writeBatch(db);

                    // Validate and update product stock (important for data integrity)
                    for (const cartItem of sale.items) {
                        const productRef = doc(db, "products", cartItem.productId);
                        // Fetch the *latest* product data from Firestore to avoid race conditions
                        const productDoc = await getDoc(productRef);
                        if (productDoc.exists()) {
                            const productData = productDoc.data();
                            const newStock = Math.max(0, productData.stock - cartItem.quantity);
                            batch.update(productRef, { stock: newStock });
                        } else {
                            console.warn(`Product ${cartItem.productId} not found during sync. Sale item will be recorded, but stock not updated.`);
                        }
                    }

                    const saleRef = doc(collection(db, "sales"));
                    sale.date = serverTimestamp(); // Ensure server timestamp is used for accurate ordering
                    batch.set(saleRef, sale);

                    if (sale.shiftId && sale.shiftId !== 'N/A') {
                        const shiftRef = doc(db, "shifts", sale.shiftId);
                        const shiftDoc = await getDoc(shiftRef);
                        if (shiftDoc.exists()) {
                            const currentSales = shiftDoc.data().sales || [];
                            const updatedSales = [...currentSales, { id: saleRef.id, total: sale.total }];
                            batch.update(shiftRef, { sales: updatedSales });
                        } else {
                            console.warn(`Shift ${sale.shiftId} not found during sync for sale ${saleRef.id}.`);
                        }
                    }

                    if (sale.originalBillId) {
                        const billRef = doc(db, "openBills", sale.originalBillId);
                        batch.delete(billRef);
                    }

                    await batch.commit();
                    console.log(`Successfully synced sale created at ${new Date(sale.offlineTimestamp).toLocaleTimeString()}`);
                } catch (error) {
                    console.error("Failed to sync a pending sale:", error, sale);
                    window.state.pendingSales.push(sale); // Re-add to pending if commit fails
                    savePendingSalesToLocal(); // Immediately save the updated pending list
                    showUserError('firestore-status', `Failed to sync a sale. Will retry. Error: ${error.message}`);
                }
            }
            savePendingSalesToLocal(); // Final save after all attempts

            if (window.state.pendingSales.length === 0) {
                showModal('Sync Complete', 'All offline sales have been successfully synced to the server.', () => true, false);
            } else {
                showModal('Sync Incomplete', `${window.state.pendingSales.length} sale(s) could not be synced. They will be retried later.`, () => true, false);
            }
            renderAllUI(); // Re-render to update UI, especially pending count
        }

        // --- AUTHENTICATION & LOGIN LOGIC ---
        function listenForAuthChanges(auth, db) {
            onAuthStateChanged(auth, async (user) => {
                if (user) {
                    console.log("Firebase Auth user detected:", user.uid);
                    let userDoc = null;
                    const maxAttempts = 10; // Increased attempts for robustness
                    for (let i = 0; i < maxAttempts; i++) {
                        try {
                            const userDocRef = doc(db, "users", user.uid);
                            userDoc = await getDoc(userDocRef);
                            if (userDoc.exists()) {
                                console.log(`User profile found on attempt ${i + 1}.`);
                                break; // Found the user profile, exit loop
                            } else {
                                console.warn(`User profile not found on attempt ${i + 1}. Retrying...`);
                            }
                        } catch (error) {
                            console.warn(`Attempt ${i + 1} to fetch user profile failed with error:`, error);
                        }
                        // Exponential backoff with a cap, to give Firestore more time
                        const delay = Math.min(5000, 500 * (i + 1)); // 0.5s, 1s, 1.5s, ..., max 5s
                        await new Promise(resolve => setTimeout(resolve, delay));
                    }

                    if (userDoc && userDoc.exists()) {
                        loginUser({ uid: user.uid, id: user.uid, ...userDoc.data() }, db);
                    } else {
                        console.error("User profile not found in Firestore after multiple attempts. Logging out.");
                        showModal('Error', 'User profile not found. This might happen if profile creation failed or data propagation is slow. Please try signing up again or contact support.', () => {
                            handleLogout(auth);
                            return true;
                        });
                    }
                } else {
                    if (window.state.currentUser) {
                        console.log("User logged out.");
                        window.state.currentUser = null;
                        stopAllListeners();
                        hideApp();
                    }
                }
            });
        }

        function loginUser(userObject, db) {
            window.state.currentUser = userObject;
            console.log("User profile loaded:", window.state.currentUser);

            loadPendingSalesFromLocal();
            // Debounce sync to prevent multiple calls on rapid login/online status changes
            if (window.syncTimeout) clearTimeout(window.syncTimeout);
            window.syncTimeout = setTimeout(() => syncPendingSales(db), 3000);

            listenToAllData(db);
            showApp();
            setupAppEventListeners(auth, db);
        }

        async function handleAdminLogin(e, auth) {
            e.preventDefault();
            const email = sanitizeInput(document.getElementById('admin-email').value);
            const password = document.getElementById('admin-password').value; // Passwords are not sanitized as they are sent to auth service
            const errorPId = 'admin-login-error';

            if (!checkRateLimit(email)) {
                showUserError(errorPId, "Too many login attempts. Please try again in a minute.");
                return;
            }

            try {
                const userCredential = await signInWithEmailAndPassword(auth, email, password);
                // After successful login, check user role
                const userDocRef = doc(db, "users", userCredential.user.uid);
                const userDoc = await getDoc(userDocRef);

                if (userDoc.exists() && userDoc.data().role === 'admin') {
                    // Login successful, loginUser will be called by onAuthStateChanged
                    window.state.loginAttempts.delete(email); // Clear rate limit on success
                } else {
                    showUserError(errorPId, "You are not authorized as an administrator.");
                    await signOut(auth); // Log out immediately if not an admin
                }
            } catch (error) {
                console.error("Admin Login failed:", error.code, error.message);
                showUserError(errorPId, getAuthErrorMessage(error.code));
            }
        }

        async function handleWaiterLogin(e, db) {
            e.preventDefault();
            const businessId = sanitizeInput(document.getElementById('waiter-business-id').value.trim());
            const userId = sanitizeInput(document.getElementById('waiter-username').value);
            const password = document.getElementById('waiter-password').value.trim();
            const errorPId = 'waiter-login-error';

            if (!checkRateLimit(`waiter-${businessId}-${userId}`)) {
                showUserError(errorPId, "Too many login attempts. Please try again in a minute.");
                return;
            }

            if (!businessId || !userId || !password) {
                showUserError(errorPId, "Business ID, name, and password are required.");
                return;
            }

            try {
                const userDocRef = doc(db, "users", userId);
                const userDoc = await getDoc(userDocRef);

                if (userDoc.exists()) {
                    const userData = userDoc.data();
                    // Implement password hashing here:
                    // For demonstration, we'll use a simple match, but in real-world, hash the input password and compare.
                    // const hashedPassword = hashPassword(password); // Placeholder for a real hashing function
                    if (userData.businessId === businessId && userData.role === 'waiter' && userData.password === password) { // Replace `password === password` with `hashedPassword === userData.hashedPassword`
                        console.log("Waiter login successful:", userData.name);
                        localStorage.setItem('barsokoBusinessId', businessId);
                        loginUser({ id: userDoc.id, ...userData }, db);
                        window.state.loginAttempts.delete(`waiter-${businessId}-${userId}`); // Clear rate limit on success
                    } else {
                        showUserError(errorPId, "Invalid business ID, name, or password.");
                    }
                } else {
                    showUserError(errorPId, "Invalid business ID, name, or password.");
                }
            } catch (error) {
                console.error("Waiter login failed:", error);
                showUserError(errorPId, "An error occurred during login. Please try again.");
            }
        }

        function handleLogout(auth) {
            signOut(auth).catch(error => console.error("Logout failed:", error));
            // onAuthStateChanged will handle UI cleanup
        }

        function handleForgotPassword(e, auth) {
            e.preventDefault();
            const content = `<div><label for="reset-email-input" class="block text-sm font-medium text-gray-300">Enter your admin email address</label><input type="email" id="reset-email-input" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600 rounded-md" required></div>`;
            showModal('Reset Password', content, async () => {
                const email = sanitizeInput(document.getElementById('reset-email-input').value);
                if (!email) {
                    showModal('Error', 'Email address is required.', () => true, false);
                    return false;
                }
                try {
                    await sendPasswordResetEmail(auth, email);
                    showModal('Check Your Email', `A password reset link has been sent to ${email}.`, () => true, false);
                } catch (error) {
                    showModal('Error', `Could not send reset email. ${getAuthErrorMessage(error.code)}`, () => true, false);
                }
                return true;
            });
        }

        async function handleSignUp(e, auth, db) {
            e.preventDefault();
            const businessName = sanitizeInput(document.getElementById('signup-business-name').value);
            const adminName = sanitizeInput(document.getElementById('signup-admin-name').value);
            const email = sanitizeInput(document.getElementById('signup-email').value);
            const password = document.getElementById('signup-password').value;
            const errorPId = 'signup-error';

            if (!businessName || !adminName || !email || password.length < 6) {
                showUserError(errorPId, "Please fill all fields. Password must be at least 6 characters.");
                return;
            }

            if (!checkRateLimit(email)) {
                showUserError(errorPId, "Too many sign up attempts. Please try again in a minute.");
                return;
            }

            try {
                const userCredential = await createUserWithEmailAndPassword(auth, email, password);
                const user = userCredential.user;

                const businessRef = await addDoc(collection(db, "businesses"), {
                    name: businessName,
                    owner: user.uid,
                    createdAt: serverTimestamp()
                });
                const businessId = businessRef.id;

                const userProfile = {
                    name: adminName,
                    email: email,
                    role: 'admin',
                    businessId: businessId,
                    createdAt: new Date().toISOString()
                };
                await setDoc(doc(db, "users", user.uid), userProfile);
                await setupInitialData(db, businessId);

                showModal('Success', 'Account created! You will be logged in automatically.', () => {
                    // This callback runs when the user closes the success modal.
                    // We don't need to do anything here because onAuthStateChanged will handle the login.
                    return true; // Close the modal
                }, false); // Set showConfirm to false, just a notification

                window.state.loginAttempts.delete(email); // Clear rate limit on success
            } catch (error) {
                console.error("Sign up failed:", error);
                const errorMessage = getAuthErrorMessage(error.code);
                showUserError(errorPId, errorMessage); // Display error on the form
                // If it's email-already-in-use, we might want to suggest signing in instead.
                if (error.code === 'auth/email-already-in-use') {
                    showModal('Account Exists', 'This email is already registered. Please try signing in, or use a different email to sign up.', () => {
                        // Optionally, switch to admin login tab here
                        setupLoginTabs(); // Reset tabs
                        document.getElementById('admin-login-tab').click(); // Activate admin login tab
                        return true;
                    });
                }
            }
        }

        // Modified handleGoogleAuth to take a 'flow' parameter
        async function handleGoogleAuth(auth, db, flow) {
            const provider = new GoogleAuthProvider();
            try {
                const result = await signInWithPopup(auth, provider);
                const user = result.user;
                const userDocRef = doc(db, "users", user.uid);
                const userDoc = await getDoc(userDocRef);

                if (!userDoc.exists()) {
                    if (flow === 'signup') {
                        console.log("New user signing up with Google:", user.displayName);
                        const businessName = prompt("Welcome! Please enter the name of your business to get started:");
                        if (!businessName) {
                            showModal('Error', "Business name is required to create an account.", () => true, false);
                            await signOut(auth); // Log out if business name not provided
                            return;
                        }
                        const businessRef = await addDoc(collection(db, "businesses"), {
                            name: businessName,
                            owner: user.uid,
                            createdAt: serverTimestamp()
                        });

                        await setDoc(userDocRef, {
                            name: user.displayName,
                            email: user.email,
                            role: 'admin',
                            businessId: businessRef.id,
                            createdAt: new Date().toISOString()
                        });
                        await setupInitialData(db, businessRef.id);
                        showModal('Success!', 'Your business account has been created. You will be logged in automatically.', () => true, false);
                    } else {
                        // Google sign-in attempted from Admin Login, but user is new
                        showModal('Account Not Found', 'No existing account found with this Google ID. Please use the Sign Up tab.', () => {
                            // Switch to signup tab and logout user from Firebase Auth
                            setupLoginTabs(); // Reset tabs
                            document.getElementById('signup-tab').click(); // Activate signup tab
                            handleLogout(auth);
                            return true;
                        });
                    }
                } else {
                    const userData = userDoc.data();
                    if (flow === 'admin' && userData.role !== 'admin') {
                        showModal('Unauthorized', 'This Google account is not registered as an admin for any business. Please use an admin account or sign up.', () => {
                            handleLogout(auth);
                            return true;
                        });
                    } else if (flow === 'signup' && userData.role === 'admin' && userData.businessId) {
                        // Already an admin, just log them in normally, prevent creating new business
                        showModal('Already Registered', 'You already have an admin account. Logging you in now.', () => true, false);
                        // loginUser will be called by onAuthStateChanged due to `result.user`
                    } else {
                        console.log("Returning user signed in with Google:", user.displayName);
                        // loginUser will be called by onAuthStateChanged due to `result.user`
                    }
                }
            } catch (error) {
                console.error("Google Sign-In failed:", error);
                showModal('Error', "Could not sign in with Google. Please try again. " + getAuthErrorMessage(error.code), () => true, false);
            }
        }

        function getAuthErrorMessage(errorCode) {
            switch (errorCode) {
                case 'auth/user-not-found':
                case 'auth/wrong-password':
                    return 'Invalid email or password.';
                case 'auth/invalid-email':
                    return 'Please enter a valid email address.';
                case 'auth/email-already-in-use':
                    return 'This email address is already in use.';
                case 'auth/weak-password':
                    return 'The password is too weak. It must be at least 6 characters.';
                case 'auth/popup-closed-by-user':
                    return 'Google sign-in window closed. Please try again.';
                case 'auth/cancelled-popup-request':
                    return 'Sign-in cancelled. You might have another popup open.';
                default:
                    return 'An unexpected error occurred. Please try again.';
            }
        }

        // --- FIRESTORE SERVICE LOGIC ---
        let unsubscribes = [];
        function stopAllListeners() {
            unsubscribes.forEach(unsub => unsub());
            unsubscribes = [];
            console.log("All Firestore listeners stopped.");
        }

        function listenToAllData(db) {
            console.log("Starting Firestore listeners...");
            stopAllListeners(); // Ensure old listeners are stopped before starting new ones

            const businessId = window.state.currentUser.businessId;
            if (!businessId) {
                console.error("CRITICAL: No Business ID found for current user. Cannot listen to data.");
                handleLogout(auth);
                return;
            }

            const businessDocUnsub = onSnapshot(doc(db, "businesses", businessId), (docSnap) => {
                if (docSnap.exists()) {
                    window.state.settings = { businessId, ...docSnap.data() } || { businessName: 'BarSoko POS', mpesaTill: '' };
                } else {
                    console.warn("Business document not found for current user's business ID. This might indicate a data inconsistency.");
                    // Optionally, show an error and log out or disable business-specific features
                }
                renderAllUI();
            }, (error) => {
                console.error("Error listening to business settings:", error);
                showUserError('firestore-status', `Failed to load settings: ${error.message}`);
            });
            unsubscribes.push(businessDocUnsub);

            const productsQuery = query(collection(db, "products"), where("businessId", "==", businessId));
            const productsUnsub = onSnapshot(productsQuery, (snapshot) => {
                window.state.products = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                // Trigger low stock alerts
                checkLowStockAlerts();
                renderAllUI();
            }, (error) => {
                console.error("Error listening to products:", error);
                showUserError('firestore-status', `Failed to load products: ${error.message}`);
            });
            unsubscribes.push(productsUnsub);

            const categoriesQuery = query(collection(db, "categories"), where("businessId", "==", businessId));
            const categoriesUnsub = onSnapshot(categoriesQuery, (snapshot) => {
                window.state.categories = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })).sort((a, b) => a.name.localeCompare(b.name));
                renderAllUI();
            }, (error) => {
                console.error("Error listening to categories:", error);
                showUserError('firestore-status', `Failed to load categories: ${error.message}`);
            });
            unsubscribes.push(categoriesUnsub);

            const openBillsQuery = query(collection(db, "openBills"), where("businessId", "==", businessId));
            const openBillsUnsub = onSnapshot(openBillsQuery, (snapshot) => {
                window.state.openBills = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderAllUI();
            }, (error) => {
                console.error("Error listening to open bills:", error);
                showUserError('firestore-status', `Failed to load open bills: ${error.message}`);
            });
            unsubscribes.push(openBillsUnsub);

            const shiftsQuery = query(collection(db, "shifts"), where("businessId", "==", businessId));
            const shiftsUnsub = onSnapshot(shiftsQuery, (snapshot) => {
                window.state.shifts = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderAllUI();
            }, (error) => {
                console.error("Error listening to shifts:", error);
                showUserError('firestore-status', `Failed to load shifts: ${error.message}`);
            });
            unsubscribes.push(shiftsUnsub);

            const usersQuery = query(collection(db, "users"), where("businessId", "==", businessId));
            const usersUnsub = onSnapshot(usersQuery, (snapshot) => {
                window.state.users = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderAllUI();
            }, (error) => {
                console.error("Error listening to users:", error);
                showUserError('firestore-status', `Failed to load users: ${error.message}`);
            });
            unsubscribes.push(usersUnsub);

            const salesQuery = query(collection(db, "sales"), where("businessId", "==", businessId));
            const salesUnsub = onSnapshot(salesQuery, (snapshot) => {
                window.state.sales = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderAllUI();
            }, (error) => {
                console.error("Error listening to sales:", error);
                showUserError('firestore-status', `Failed to load sales: ${error.message}`);
            });
            unsubscribes.push(salesUnsub);
        }

        async function setupInitialData(db, businessId) {
            console.log(`Setting up initial data for business ${businessId}...`);
            const batch = writeBatch(db);

            // Fetch existing categories to avoid duplicates
            const existingCategoriesQuery = query(collection(db, "categories"), where("businessId", "==", businessId));
            const existingCategoriesSnapshot = await getDocs(existingCategoriesQuery);
            const existingCategoryNames = new Set(existingCategoriesSnapshot.docs.map(doc => doc.data().name.toLowerCase()));

            const categoriesToAdd = ['Beers', 'Ciders', 'Spirits', 'Wines', 'Soft Drinks', 'Other'];
            categoriesToAdd.forEach(name => {
                if (!existingCategoryNames.has(name.toLowerCase())) {
                    const catRef = doc(collection(db, "categories"));
                    batch.set(catRef, { name, businessId });
                }
            });

            // Fetch existing products to avoid duplicates
            const existingProductsQuery = query(collection(db, "products"), where("businessId", "==", businessId));
            const existingProductsSnapshot = await getDocs(existingProductsQuery);
            const existingProductNames = new Set(existingProductsSnapshot.docs.map(doc => doc.data().name.toLowerCase()));

            const products = [
                // --- Beers ---
                { name: 'Tusker Lager', price: 350, stock: 120, category: 'Beers', isFavorite: true, businessId },
                { name: 'Tusker Malt', price: 350, stock: 96, category: 'Beers', isFavorite: true, businessId },
                { name: 'Tusker Lite', price: 350, stock: 96, category: 'Beers', isFavorite: false, businessId },
                { name: 'White Cap Lager', price: 350, stock: 72, category: 'Beers', isFavorite: true, businessId },
                { name: 'White Cap Lite', price: 350, stock: 48, category: 'Beers', isFavorite: false, businessId },
                { name: 'Guinness', price: 400, stock: 96, category: 'Beers', isFavorite: true, businessId },
                { name: 'Pilsner', price: 350, stock: 72, category: 'Beers', isFavorite: false, businessId },
                { name: 'Balozi', price: 300, stock: 48, category: 'Beers', isFavorite: false, businessId },
                { name: 'Heineken', price: 400, stock: 72, category: 'Beers', isFavorite: false, businessId },
                { name: 'Sierra Amber', price: 550, stock: 24, category: 'Beers', isFavorite: false, businessId },
                { name: 'Sierra Blonde', price: 550, stock: 24, category: 'Beers', isFavorite: false, businessId },
                { name: 'Budweiser', price: 400, stock: 48, category: 'Beers', isFavorite: false, businessId },
                { name: 'Corona', price: 500, stock: 48, category: 'Beers', isFavorite: false, businessId },
                { name: 'Desperados', price: 500, stock: 24, category: 'Beers', isFavorite: false, businessId },
                { name: 'Smirnoff Ice Black', price: 400, stock: 48, category: 'Beers', isFavorite: false, businessId },
                { name: 'Smirnoff Ice Red', price: 400, stock: 48, category: 'Beers', isFavorite: false, businessId },
                { name: 'Summit Lager', price: 300, stock: 48, category: 'Beers', isFavorite: false, businessId },
                { name: 'Summit Malt', price: 300, stock: 48, category: 'Beers', isFavorite: false, businessId },
                { name: 'Tusker Can', price: 400, stock: 48, category: 'Beers', isFavorite: false, businessId },
                { name: 'White Cap Can', price: 400, stock: 48, category: 'Beers', isFavorite: false, businessId },
                // --- Ciders ---
                { name: 'Savanna Dry', price: 450, stock: 72, category: 'Ciders', isFavorite: true, businessId },
                { name: 'Hunters Dry', price: 450, stock: 48, category: 'Ciders', isFavorite: false, businessId },
                { name: 'Hunters Gold', price: 450, stock: 48, category: 'Ciders', isFavorite: false, businessId },
                { name: 'Tusker Cider', price: 400, stock: 72, category: 'Ciders', isFavorite: true, businessId },
                { name: 'Sikera Cider', price: 400, stock: 48, category: 'Ciders', isFavorite: false, businessId },
                { name: 'Savanna Light', price: 450, stock: 24, category: 'Ciders', isFavorite: false, businessId },
                { name: 'Hunters Edge', price: 450, stock: 24, category: 'Ciders', isFavorite: false, businessId },
                { name: 'Savanna Angry Lemon', price: 450, stock: 24, category: 'Ciders', isFavorite: false, businessId },
                { name: 'Snapp', price: 350, stock: 24, category: 'Ciders', isFavorite: false, businessId },
                { name: 'Guarana', price: 350, stock: 24, category: 'Ciders', isFavorite: false, businessId },
                // --- Spirits (Bottles & Tots) ---
                { name: 'Gilbeys Gin (Tot)', price: 200, stock: 500, category: 'Spirits', isFavorite: true, businessId },
                { name: 'Johnnie Walker Black (Tot)', price: 450, stock: 200, category: 'Spirits', isFavorite: true, businessId },
                { name: 'Jameson (Tot)', price: 350, stock: 300, category: 'Spirits', isFavorite: true, businessId },
                { name: 'Captain Morgan (Tot)', price: 200, stock: 400, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Kenya Cane (KC) (Tot)', price: 150, stock: 500, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Smirnoff Vodka (750ml)', price: 2200, stock: 24, category: 'Spirits', isFavorite: true, businessId },
                { name: 'Gilbeys Gin (750ml)', price: 2200, stock: 24, category: 'Spirits', isFavorite: true, businessId },
                { name: 'Johnnie Walker Red (750ml)', price: 2800, stock: 12, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Johnnie Walker Black (750ml)', price: 4500, stock: 12, category: 'Spirits', isFavorite: true, businessId },
                { name: 'Johnnie Walker Black (1L)', price: 5500, stock: 6, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Jameson (750ml)', price: 3500, stock: 12, category: 'Spirits', isFavorite: true, businessId },
                { name: 'Jameson (1L)', price: 4200, stock: 6, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Hennessy VS (750ml)', price: 6500, stock: 6, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Hennessy VSOP (750ml)', price: 9000, stock: 6, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Jack Daniels (750ml)', price: 4000, stock: 12, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Jack Daniels (1L)', price: 4800, stock: 6, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Captain Morgan Gold (750ml)', price: 2000, stock: 24, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Bacardi White Rum (750ml)', price: 2500, stock: 12, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Absolut Vodka (750ml)', price: 2800, stock: 12, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Absolut Vodka (1L)', price: 3400, stock: 6, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Ciroc Vodka (750ml)', price: 5000, stock: 6, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Grey Goose Vodka (750ml)', price: 6000, stock: 6, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Tanqueray Gin (750ml)', price: 3800, stock: 12, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Bombay Sapphire Gin (750ml)', price: 4200, stock: 12, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Hendricks Gin (750ml)', price: 7000, stock: 6, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Kenya Cane (KC) (750ml)', price: 1200, stock: 24, category: 'Spirits', isFavorite: true, businessId },
                { name: 'Chrome Gin (750ml)', price: 1200, stock: 24, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Singleton 12yrs (750ml)', price: 6000, stock: 6, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Glenfiddich 12yrs (750ml)', price: 6500, stock: 6, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Glenlivet 12yrs (750ml)', price: 6500, stock: 6, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Chivas Regal 12yrs (750ml)', price: 5000, stock: 6, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Baileys (750ml)', price: 3000, stock: 12, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Amarula (750ml)', price: 2500, stock: 12, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Jose Cuervo Tequila (750ml)', price: 3500, stock: 12, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Don Julio Blanco (750ml)', price: 7000, stock: 6, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Jägermeister (1L)', price: 4000, stock: 6, category: 'Spirits', isFavorite: false, businessId },
                { name: 'Martell VS (750ml)', price: 5500, stock: 6, category: 'Spirits', isFavorite: false, businessId },
                // --- Wines ---
                { name: 'House Wine Red (Glass)', price: 500, stock: 100, category: 'Wines', isFavorite: true, businessId },
                { name: 'House Wine White (Glass)', price: 500, stock: 100, category: 'Wines', isFavorite: true, businessId },
                { name: 'House Wine Rose (Glass)', price: 500, stock: 50, category: 'Wines', isFavorite: false, businessId },
                { name: '4th Street Red (Bottle)', price: 1800, stock: 24, category: 'Wines', isFavorite: false, businessId },
                { name: '4th Street White (Bottle)', price: 1800, stock: 24, category: 'Wines', isFavorite: false, businessId },
                { name: 'Cellar Cask Red (Bottle)', price: 1600, stock: 36, category: 'Wines', isFavorite: false, businessId },
                { name: 'Cellar Cask White (Bottle)', price: 1600, stock: 36, category: 'Wines', isFavorite: false, businessId },
                { name: 'Four Cousins Red (Bottle)', price: 2000, stock: 24, category: 'Wines', isFavorite: false, businessId },
                { name: 'Four Cousins White (Bottle)', price: 2000, stock: 24, category: 'Wines', isFavorite: false, businessId },
                { name: 'Nederburg Cab Sauv (Bottle)', price: 2500, stock: 12, category: 'Wines', isFavorite: false, businessId },
                { name: 'Nederburg Sauv Blanc (Bottle)', price: 2500, stock: 12, category: 'Wines', isFavorite: false, businessId },
                { name: 'Drostdy Hof Red (Bottle)', price: 1800, stock: 12, category: 'Wines', isFavorite: false, businessId },
                { name: 'Drostdy Hof White (Bottle)', price: 1800, stock: 12, category: 'Wines', isFavorite: false, businessId },
                { name: 'Robertson Red (Bottle)', price: 2200, stock: 12, category: 'Wines', isFavorite: false, businessId },
                { name: 'Robertson White (Bottle)', price: 2200, stock: 12, category: 'Wines', isFavorite: false, businessId },
                { name: 'KWV Red (Bottle)', price: 2400, stock: 12, category: 'Wines', isFavorite: false, businessId },
                { name: 'KWV White (Bottle)', price: 2400, stock: 12, category: 'Wines', isFavorite: false, businessId },
                { name: 'Jacobs Creek Red (Bottle)', price: 2800, stock: 12, category: 'Wines', isFavorite: false, businessId },
                { name: 'Jacobs Creek White (Bottle)', price: 2800, stock: 12, category: 'Wines', isFavorite: false, businessId },
                { name: 'Frontera Red (Bottle)', price: 2000, stock: 12, category: 'Wines', isFavorite: false, businessId },
                // --- Soft Drinks ---
                { name: 'Coca-Cola', price: 150, stock: 200, category: 'Soft Drinks', isFavorite: true, businessId },
                { name: 'Coke Zero', price: 150, stock: 100, category: 'Soft Drinks', isFavorite: false, businessId },
                { name: 'Fanta Orange', price: 150, stock: 150, category: 'Soft Drinks', isFavorite: false, businessId },
                { name: 'Sprite', price: 150, stock: 150, category: 'Soft Drinks', isFavorite: false, businessId },
                { name: 'Krest Bitter Lemon', price: 150, stock: 100, category: 'Soft Drinks', isFavorite: false, businessId },
                { name: 'Stoney', price: 150, stock: 100, category: 'Soft Drinks', isFavorite: false, businessId },
                { name: 'Fanta Blackcurrant', price: 150, stock: 100, category: 'Soft Drinks', isFavorite: false, businessId },
                { name: 'Fanta Passion', price: 150, stock: 100, category: 'Soft Drinks', isFavorite: false, businessId },
                { name: 'Keringet Water (500ml)', price: 100, stock: 200, category: 'Soft Drinks', isFavorite: false, businessId },
                { name: 'Dasani Water (500ml)', price: 100, stock: 200, category: 'Soft Drinks', isFavorite: false, businessId },
                { name: 'Keringet Water (1L)', price: 200, stock: 100, category: 'Soft Drinks', isFavorite: false, businessId },
                { name: 'Alvaro', price: 200, stock: 50, category: 'Soft Drinks', isFavorite: false, businessId },
                { name: 'Minute Maid Juice', price: 200, stock: 100, category: 'Soft Drinks', isFavorite: false, businessId },
                { name: 'Afia Juice', price: 200, stock: 100, category: 'Soft Drinks', isFavorite: false, businessId },
                { name: 'Tonic Water', price: 150, stock: 100, category: 'Soft Drinks', isFavorite: false, businessId },
                { name: 'Soda Water', price: 150, stock: 100, category: 'Soft Drinks', isFavorite: false, businessId },
                { name: 'Red Bull', price: 400, stock: 50, category: 'Soft Drinks', isFavorite: false, businessId },
                { name: 'Monster Energy', price: 350, stock: 50, category: 'Soft Drinks', isFavorite: false, businessId },
                { name: 'Highlands Water (500ml)', price: 100, stock: 100, category: 'Soft Drinks', isFavorite: false, businessId },
                { name: 'Aquamist Water (500ml)', price: 100, stock: 100, category: 'Soft Drinks', isFavorite: false, businessId },
                // --- Other (Cocktails & More) ---
                { name: 'Dawa Cocktail', price: 600, stock: 100, category: 'Other', isFavorite: true, businessId },
                { name: 'Mojito', price: 700, stock: 100, category: 'Other', isFavorite: false, businessId },
                { name: 'Long Island Iced Tea', price: 800, stock: 100, category: 'Other', isFavorite: false, businessId },
                { name: 'Margarita', price: 650, stock: 100, category: 'Other', isFavorite: false, businessId },
                { name: 'Cosmopolitan', price: 700, stock: 100, category: 'Other', isFavorite: false, businessId },
                { name: 'Old Fashioned', price: 750, stock: 50, category: 'Other', isFavorite: false, businessId },
                { name: 'Whiskey Sour', price: 700, stock: 50, category: 'Other', isFavorite: false, businessId },
                { name: 'Gin & Tonic', price: 500, stock: 200, category: 'Other', isFavorite: true, businessId },
                { name: 'Vodka & Tonic', price: 500, stock: 200, category: 'Other', isFavorite: false, businessId },
                { name: 'Cuba Libre', price: 550, stock: 100, category: 'Other', isFavorite: false, businessId },
                { name: 'Passion Juice (Glass)', price: 300, stock: 100, category: 'Other', isFavorite: false, businessId },
                { name: 'Mango Juice (Glass)', price: 300, stock: 100, category: 'Other', isFavorite: false, businessId },
                { name: 'Orange Juice (Glass)', price: 300, stock: 100, category: 'Other', isFavorite: false, businessId },
                { name: 'Pineapple Juice (Glass)', price: 300, stock: 100, category: 'Other', isFavorite: false, businessId },
                { name: 'Espresso', price: 250, stock: 100, category: 'Other', isFavorite: false, businessId },
                { name: 'Cappuccino', price: 300, stock: 100, category: 'Other', isFavorite: false, businessId },
                { name: 'Latte', price: 300, stock: 100, category: 'Other', isFavorite: false, businessId },
                { name: 'Kenyan Tea', price: 200, stock: 100, category: 'Other', isFavorite: false, businessId },
                { name: 'Herbal Tea', price: 250, stock: 100, category: 'Other', isFavorite: false, businessId },
                { name: 'Hot Chocolate', price: 300, stock: 100, category: 'Other', isFavorite: false, businessId },
            ];

            products.forEach(p => {
                if (!existingProductNames.has(p.name.toLowerCase())) {
                    const prodRef = doc(collection(db, "products"));
                    batch.set(prodRef, p);
                }
            });

            try {
                await batch.commit();
                console.log("Initial data setup complete.");
            } catch (error) {
                console.error("Error setting up initial data:", error);
                showUserError('firestore-status', `Failed to set up initial data: ${error.message}`);
            }
        }

        // --- UI & EVENT HANDLER LOGIC ---

        function showApp() {
            loginScreen.style.display = 'none';
            appDiv.classList.remove('hidden');
            if (window.state.currentUser.role === 'admin') {
                aiInsightsBar.classList.remove('hidden');
            }
        }

        function hideApp() {
            loginScreen.style.display = 'flex';
            appDiv.classList.add('hidden');
            aiInsightsBar.classList.add('hidden');
        }

        function showModal(title, content, onConfirm, showConfirm = true) {
            modalTitle.textContent = title;
            modalBody.innerHTML = content;

            modalFooter.innerHTML = `
                <button id="modal-close-btn-dynamic" class="bg-gray-600 text-gray-200 font-semibold py-2 px-4 rounded-lg hover:bg-gray-500">Close</button>
                <button id="modal-confirm-btn-dynamic" class="bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700">Confirm</button>
            `;

            const newConfirmBtn = document.getElementById('modal-confirm-btn-dynamic');
            const newCloseBtn = document.getElementById('modal-close-btn-dynamic');
            newConfirmBtn.classList.toggle('hidden', !showConfirm);
            newConfirmBtn.onclick = () => { if(onConfirm()) { hideModal(); } };
            newCloseBtn.onclick = hideModal;
            modal.classList.remove('hidden');
        }
        function hideModal() { modal.classList.add('hidden'); }

        function checkLowStockAlerts() {
            const lowStockProducts = window.state.products.filter(p => p.stock > 0 && p.stock <= 10); // Threshold of 10
            if (lowStockProducts.length > 0) {
                const productNames = lowStockProducts.map(p => `<strong>${sanitizeInput(p.name)}</strong> (${p.stock} in stock)`).join(', ');
                aiInsightText.innerHTML = `⚠️ Low Stock Alert: ${productNames}. Please reorder soon!`;
                aiInsightsBar.classList.remove('hidden'); // Ensure the bar is visible for alerts
            } else if (window.state.currentUser.role === 'admin' && !aiInsightText.textContent.includes('report')) {
                // If no low stock, revert to generic AI message if no report insight is present
                aiInsightText.textContent = "Generate a report to get AI-powered business insights.";
            }
        }

        let debounceRenderTimeout;
        function renderAllUI() {
            if (!window.state.currentUser) return;

            // Debounce rendering to avoid performance issues from rapid state changes
            if (debounceRenderTimeout) clearTimeout(debounceRenderTimeout);
            debounceRenderTimeout = setTimeout(() => {
                userInfo.textContent = `User: ${sanitizeInput(window.state.currentUser.name)} (${sanitizeInput(window.state.currentUser.role)})`;
                businessNameHeader.textContent = sanitizeInput(window.state.settings.name || 'BarSoko POS');
                updateOnlineStatus();
                renderTabs();
                renderDashboard();
                renderOpenBills();
                renderProductCategoriesNav();
                renderProductsGrid(document.querySelector('.category-btn.active')?.dataset.category || 'Favorites');
                renderCart();
                renderShiftControls();

                // Only render management lists if the corresponding tab is active
                const activeTabKey = tabsContainer.querySelector('button.active')?.dataset.tab;
                if (activeTabKey === 'products') renderProductListManagement();
                if (activeTabKey === 'categories') renderCategoryManagement();
                if (activeTabKey === 'waiters') renderUserListManagement();
                if (activeTabKey === 'my-sales') renderSalesHistory(false);
                if (activeTabKey === 'all-sales') renderSalesHistory(true);
                if (activeTabKey === 'settings') renderSettings();

                // Ensure the correct tab content is displayed
                Object.values(tabContents).forEach(content => content.classList.add('hidden'));
                if (activeTabKey && tabContents[activeTabKey]) {
                    tabContents[activeTabKey].classList.remove('hidden');
                } else {
                    // Default to dashboard or first available tab if none active
                    const firstTab = tabsContainer.querySelector('button');
                    if (firstTab) {
                        firstTab.classList.add('active');
                        tabContents[firstTab.dataset.tab].classList.remove('hidden');
                    }
                }
            }, 50); // Small debounce time
        }

        function renderTabs() {
            const activeTabKey = tabsContainer.querySelector('button.active')?.dataset.tab;
            tabsContainer.innerHTML = '';
            const allTabs = [
                { key: 'dashboard', label: 'Dashboard', adminOnly: true },
                { key: 'products', label: 'Products', adminOnly: false },
                { key: 'my-sales', label: 'My Sales', adminOnly: false },
                { key: 'all-sales', label: 'All Sales', adminOnly: true },
                { key: 'reports', label: 'Reports', adminOnly: true },
                { key: 'waiters', label: 'Staff', adminOnly: true },
                { key: 'categories', label: 'Categories', adminOnly: true },
                { key: 'settings', label: 'Settings', adminOnly: false },
            ];
            const visibleTabs = allTabs.filter(tab => !tab.adminOnly || window.state.currentUser.role === 'admin');
            visibleTabs.forEach((tab) => {
                const button = document.createElement('button');
                button.setAttribute('role', 'tab');
                button.dataset.tab = tab.key;
                button.className = `tab-btn`;
                button.textContent = tab.label;
                if (tab.key === activeTabKey) {
                    button.classList.add('active');
                }
                tabsContainer.appendChild(button);
            });
        }

        function renderDashboard() {
    if (window.state.currentUser.role !== 'admin' || !tabContents.dashboard) return;

    const activeShifts = window.state.shifts.filter(s => !s.end);
    const activeWaitersHtml = activeShifts.length > 0
        ? activeShifts.map(s => `<li>${sanitizeInput(s.waiterName)} (since ${new Date(s.start).toLocaleTimeString()})</li>`).join('')
        : '<li>No staff currently on shift.</li>';

    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const todaysSales = window.state.sales.filter(s => s.date && new Date(s.date.seconds * 1000) >= today);
    const totalSales = todaysSales.reduce((sum, s) => sum + s.total, 0);

    const salesByWaiter = todaysSales.reduce((acc, sale) => {
        acc[sale.waiterName] = (acc[sale.waiterName] || 0) + sale.total;
        return acc;
    }, {});
    
    // 👇 FIX STARTS HERE
    // Convert the salesByWaiter object into an HTML string for the list
    const salesByWaiterHtml = Object.entries(salesByWaiter)
        .sort(([, a], [, b]) => b - a) // Sort from highest sales to lowest
        .map(([name, total]) => `<li><strong>${sanitizeInput(name)}:</strong> Ksh ${total.toFixed(2)}</li>`)
        .join('');
    // 👆 FIX ENDS HERE

    tabContents.dashboard.innerHTML = `<div class="space-y-4">
        <div class="bg-gray-700 p-4 rounded-lg"><h3 class="font-semibold text-blue-300">Active Staff</h3><ul class="list-disc list-inside text-sm text-blue-400">${activeWaitersHtml}</ul></div>
        <div class="bg-gray-700 p-4 rounded-lg"><h3 class="font-semibold text-gray-200">Today's Total Sales</h3><p class="text-3xl font-bold text-green-400">Ksh ${totalSales.toFixed(2)}</p></div>
        <div class="bg-gray-700 p-4 rounded-lg"><h3 class="font-semibold text-gray-200">Sales by Staff (Live)</h3><ul class="list-disc list-inside text-sm text-gray-300">${salesByWaiterHtml}</ul></div>
    </div>`;
}

        function renderOpenBills() {
            const billsToShow = window.state.currentUser.role === 'admin'
                ? window.state.openBills
                : window.state.openBills.filter(b => b.waiterId === window.state.currentUser.id);
            openBillsContainer.innerHTML = '';
            const newBillButton = document.createElement('button');
            newBillButton.className = 'border-2 border-dashed border-gray-600 rounded-lg p-4 text-center text-gray-400 hover:bg-gray-700 hover:border-gray-500 transition';
            newBillButton.innerHTML = `<i class="fas fa-plus text-2xl"></i><p class="font-semibold mt-1">New Bill</p>`;
            newBillButton.id = 'new-bill-btn';
            openBillsContainer.appendChild(newBillButton);

            billsToShow.forEach(bill => {
                const billButton = document.createElement('button');
                const isSelected = window.state.currentBillId === bill.id;
                billButton.className = `border rounded-lg p-4 text-center cursor-pointer transition relative ${isSelected ? 'bg-blue-600 text-white border-blue-600' : 'bg-gray-700 border-gray-600 hover:border-blue-400'}`;

                const waiterNameHtml = window.state.currentUser.role === 'admin' ? `<p class="text-xs opacity-70">${sanitizeInput(bill.waiterName)}</p>` : '';
                const total = bill.items.reduce((t, i) => t + (i.price * i.quantity), 0);

                const billNameP = document.createElement('p');
                billNameP.className = 'font-bold text-lg';
                billNameP.textContent = sanitizeInput(bill.name);
                billButton.innerHTML = `<span class="absolute top-1 right-1 text-xs bg-red-500 text-white font-semibold px-2 py-0.5 rounded-full">Unpaid</span>`;
                billButton.appendChild(billNameP);
                billButton.innerHTML += `<p class="text-sm">Ksh ${total.toFixed(2)}</p>${waiterNameHtml}`;

                billButton.dataset.billId = bill.id;
                billButton.classList.add('open-bill-btn');
                openBillsContainer.appendChild(billButton);
            });
        }

        function renderProductCategoriesNav() {
            const activeCategory = document.querySelector('.category-btn.active')?.dataset.category || 'Favorites';
            const uniqueCategoryNames = [...new Set(window.state.categories.map(c => c.name))];
            const categories = ['Favorites', 'All', ...uniqueCategoryNames];
            productCategoriesNav.innerHTML = categories.map(cat =>
                `<button data-category="${sanitizeInput(cat)}" class="category-btn px-3 py-1 border rounded-full text-sm border-gray-600 ${cat === activeCategory ? 'active' : ''}">${cat === 'Favorites' ? '⭐ ' : ''}${sanitizeInput(cat)}</button>`
            ).join('');
        }

        function renderProductsGrid(category = 'Favorites') {
            let productsToShow = window.state.products;
            if (category === 'Favorites') {
                productsToShow = window.state.products.filter(p => p.isFavorite);
            } else if (category !== 'All') {
                productsToShow = window.state.products.filter(p => p.category === category);
            }
            productGrid.innerHTML = '';
            if (productsToShow.length === 0) {
                productGrid.innerHTML = `<p class="text-gray-400 col-span-full">No products in this category.</p>`;
                return;
            }
            productsToShow.forEach(p => {
                const disabled = p.stock <= 0 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-700 hover:border-blue-500';
                const stockInfo = p.stock <= 0 ? '<span class="text-red-500 font-bold">Out of Stock</span>' : `<span class="text-gray-400">${p.stock} in stock</span>`;

                const productCard = document.createElement('div');
                productCard.className = `product-card border rounded-lg p-4 text-center cursor-pointer transition border-gray-700 bg-gray-800 ${disabled}`;
                productCard.setAttribute('role', 'gridcell');
                productCard.setAttribute('tabindex', p.stock > 0 ? '0' : '-1'); // Make unclickable if out of stock

                const nameH4 = document.createElement('h4');
                nameH4.className = 'font-semibold text-gray-100';
                nameH4.textContent = sanitizeInput(p.name);

                productCard.appendChild(nameH4);
                productCard.innerHTML += `<p class="text-lg font-bold text-blue-400">Ksh ${p.price.toFixed(2)}</p><p class="text-xs">${stockInfo}</p>`;

                if (p.stock > 0) {
                    productCard.dataset.productId = p.id;
                }
                productGrid.appendChild(productCard);
            });
        }

        function renderCart() {
            cartDiv.innerHTML = '';
            const total = window.state.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            const enableBtns = total > 0;
            if (window.state.cart.length === 0) {
                cartDiv.innerHTML = `<p class="text-gray-400">Your cart is empty.</p>`;
            } else {
                window.state.cart.forEach(item => {
                    const product = window.state.products.find(p => p.id === item.productId);
                    const currentStock = product ? product.stock : 0;
                    const canIncrease = currentStock > item.quantity;

                    const cartItemDiv = document.createElement('div');
                    cartItemDiv.className = 'flex justify-between items-center bg-gray-700 p-2 rounded-md';

                    const nameP = document.createElement('p');
                    nameP.className = 'font-medium';
                    nameP.textContent = sanitizeInput(item.name);
                    cartItemDiv.innerHTML = `<div></div><div class="flex items-center space-x-3">
                        <button data-id="${item.productId}" data-action="decrease-qty" aria-label="Decrease quantity of ${sanitizeInput(item.name)}" class="bg-gray-600 w-6 h-6 rounded-full">-</button>
                        <span class="font-bold">${item.quantity}</span>
                        <button data-id="${item.productId}" data-action="increase-qty" aria-label="Increase quantity of ${sanitizeInput(item.name)}" class="bg-gray-600 w-6 h-6 rounded-full ${canIncrease ? '' : 'opacity-50 cursor-not-allowed'}" ${canIncrease ? '' : 'disabled'}>+</button>
                    </div>`;
                    cartItemDiv.firstChild.appendChild(nameP);
                    cartItemDiv.firstChild.innerHTML += `<p class="text-sm text-gray-400">Ksh ${item.price.toFixed(2)}</p>`;

                    cartDiv.appendChild(cartItemDiv);
                });
            }
            cartTotalSpan.textContent = `Ksh ${total.toFixed(2)}`;
            payCashBtn.disabled = !enableBtns;
            payMpesaBtn.disabled = !enableBtns;
            payCardBtn.disabled = !enableBtns;
            saveBillBtn.disabled = !enableBtns;
            clearCartBtn.disabled = !(window.state.cart.length > 0 || window.state.currentBillId);
            printBillBtn.disabled = !window.state.currentBillId;
        }
        function renderShiftControls() {
            const myShift = window.state.shifts.find(s => s.waiterId === window.state.currentUser.id && !s.end);
            const shiftStatus = myShift ? `Shift Active since ${new Date(myShift.start).toLocaleTimeString()}` : 'No active shift.';
            const shiftButton = myShift
                ? `<button data-action="end-shift" class="w-full bg-red-600 text-white py-2 rounded-lg">End Shift</button>`
                : `<button data-action="start-shift" class="w-full bg-green-600 text-white py-2 rounded-lg">Start Shift</button>`;
            shiftManagementPanel.innerHTML = `<h3 class="font-semibold text-blue-300">Shift Management</h3><p class="text-sm text-blue-400 mb-2">${shiftStatus}</p>${shiftButton}`;
        }
        function renderProductListManagement() {
            const isAdmin = window.state.currentUser.role === 'admin';
            const addProductForm = document.getElementById('add-product-form');
            if (addProductForm) {
                addProductForm.style.display = isAdmin ? 'block' : 'none';
                // Only show the heading for "Existing Products" if the form is shown (i.e., admin)
                if (addProductForm.nextElementSibling) {
                    addProductForm.nextElementSibling.style.display = isAdmin ? 'block' : 'none';
                }
            }
            const productCategorySelect = document.getElementById('product-category');
            if (productCategorySelect) {
                const uniqueCategories = [...new Set(window.state.categories.map(c => c.name))];
                const categoryOptions = uniqueCategories.map(c => `<option value="${sanitizeInput(c)}">${sanitizeInput(c)}</option>`).join('');
                productCategorySelect.innerHTML = categoryOptions;
            }

            productListManagement.innerHTML = window.state.products.map(p => {
                const adminButtons = isAdmin ? `
                    <div class="flex items-center space-x-3">
                        <button data-id="${sanitizeInput(p.id)}" data-action="toggle-favorite" aria-label="Toggle Favorite for ${sanitizeInput(p.name)}" class="text-gray-400 hover:text-yellow-500"><i class="${p.isFavorite ? 'fas' : 'far'} fa-star"></i></button>
                        <button data-id="${sanitizeInput(p.id)}" data-action="edit-product" aria-label="Edit ${sanitizeInput(p.name)}" class="text-blue-500 hover:text-blue-700"><i class="fas fa-edit"></i></button>
                        <button data-id="${sanitizeInput(p.id)}" data-action="delete-product" aria-label="Delete ${sanitizeInput(p.name)}" class="text-red-500 hover:text-red-700"><i class="fas fa-trash"></i></button>

                    </div>` : '';
                return `
                <div class="flex justify-between items-center bg-gray-700 p-2 rounded-md">
                    <div>
                        <p class="font-medium">${sanitizeInput(p.name)}</p>
                        <p class="text-sm text-gray-400">Ksh ${p.price.toFixed(2)} - Stock: ${p.stock} - Cat: ${sanitizeInput(p.category)}</p>
                    </div>
                    ${adminButtons}
                </div>`;
            }).join('') || `<p class="text-gray-400 text-sm">No products added yet.</p>`;
        }

        function renderCategoryManagement() {
            if (window.state.currentUser.role !== 'admin') return;

            const categoryMap = new Map();
            window.state.categories.forEach(cat => {
                if (!categoryMap.has(cat.name)) {
                    categoryMap.set(cat.name, cat);
                }
            });
            const uniqueCategories = Array.from(categoryMap.values());
            categoryListManagement.innerHTML = uniqueCategories.map(cat => `
                <div class="flex justify-between items-center bg-gray-700 p-2 rounded-md">
                    <p class="font-medium">${sanitizeInput(cat.name)}</p>
                    <div class="flex items-center space-x-3">
                        <button data-id="${sanitizeInput(cat.id)}" data-name="${sanitizeInput(cat.name)}" data-action="edit-category" class="text-blue-500 hover:text-blue-700"><i class="fas fa-edit"></i></button>
                        <button data-id="${sanitizeInput(cat.id)}" data-name="${sanitizeInput(cat.name)}" data-action="delete-category" class="text-red-500 hover:text-red-700"><i class="fas fa-trash"></i></button>
                    </div>
                </div>`
            ).join('') || `<p class="text-gray-400 text-sm">No categories added yet.</p>`;
        }
        function renderUserListManagement() {
            const isAdmin = window.state.currentUser.role === 'admin';
            const addUserBtn = document.getElementById('add-user-btn');
            if (addUserBtn) {
                addUserBtn.style.display = isAdmin ? 'block' : 'none';
            }
            if (!isAdmin) {
                userListManagement.innerHTML = '<p class="text-gray-400">Staff management is for admins only.</p>';
                return;
            }
            const activeUsers = window.state.users.filter(u => !u.isDeleted);
            const deletedUsers = window.state.users.filter(u => u.isDeleted);
            let html = '<h3 class="font-semibold text-gray-200 mb-2">Active Staff</h3>';
            html += activeUsers.map(u => {
                const roleBadge = `<span class="text-xs ${u.role === 'admin' ? 'bg-blue-200 text-blue-800' : 'bg-gray-500 text-gray-100'} font-semibold px-2 py-0.5 rounded-full">${sanitizeInput(u.role)}</span>`;

                let deactivationHtml = '';
                let softDeleteButtonHtml = '';
                if (u.role === 'waiter') {
                    if (u.deactivationRequested) {
                        deactivationHtml = `<span class="text-xs bg-yellow-200 text-yellow-800 font-semibold px-2 py-0.5 rounded-full ml-2">Deactivation Requested</span>`;
                        softDeleteButtonHtml = `<button data-id="${sanitizeInput(u.id)}" data-name="${sanitizeInput(u.name)}" data-action="soft-delete-user" aria-label="Confirm Deactivation for ${sanitizeInput(u.name)}" class="text-green-500 hover:text-green-400"><i class="fas fa-check"></i> Confirm</button>`;
                    } else {
                        softDeleteButtonHtml = `<button data-id="${sanitizeInput(u.id)}" data-name="${sanitizeInput(u.name)}" data-action="soft-delete-user" aria-label="Deactivate ${sanitizeInput(u.name)}" class="text-red-500 hover:text-red-700"><i class="fas fa-user-slash"></i></button>`;
                    }
                }
                const waiterActions = u.role === 'waiter' ? `
                    <button data-id="${sanitizeInput(u.id)}" data-name="${sanitizeInput(u.name)}" data-action="reset-password" aria-label="Reset Password for ${sanitizeInput(u.name)}" class="text-yellow-500 hover:text-yellow-400"><i class="fas fa-key"></i></button>
                    ${softDeleteButtonHtml}
                ` : '';
                return `<div class="flex justify-between items-center bg-gray-700 p-2 rounded-md">
                    <div><p class="font-medium">${sanitizeInput(u.name)} ${roleBadge}${deactivationHtml}</p><p class="text-xs text-gray-400">${sanitizeInput(u.email || 'N/A')}</p></div>
                    <div class="flex items-center space-x-3">${waiterActions}</div>
                </div>`;
            }).join('');
            if (deletedUsers.length > 0) {
                html += `<hr class="my-4 border-gray-600"><h3 class="font-semibold text-gray-400 mb-2">Deactivated Staff</h3>`;
                html += deletedUsers.map(u => `
                    <div class="flex justify-between items-center bg-gray-800 p-2 rounded-md opacity-60">
                        <div><p class="font-medium italic">${sanitizeInput(u.name)}</p></div>
                        <div class="flex items-center space-x-3">
                            <button data-id="${sanitizeInput(u.id)}" data-action="restore-user" aria-label="Restore ${sanitizeInput(u.name)}" class="text-green-500 hover:text-green-400"><i class="fas fa-undo"></i> Restore</button>
                            <button data-id="${sanitizeInput(u.id)}" data-name="${sanitizeInput(u.name)}" data-action="permanent-delete-user" aria-label="Permanently Delete ${sanitizeInput(u.name)}" class="text-red-700 hover:text-red-900"><i class="fas fa-fire"></i></button>
                        </div>
                    </div>`
                ).join('');
            }
            userListManagement.innerHTML = html;
        }
        function renderSalesHistory(forAllUsers) {
            const targetList = forAllUsers ? tabContents['all-sales'] : tabContents['my-sales'];
            if (!targetList) return;
            if (forAllUsers && window.state.currentUser.role !== 'admin') {
                targetList.innerHTML = '<p class="text-gray-400">Access denied.</p>';
                return;
            }
            const salesToShow = forAllUsers
                ? window.state.sales
                : window.state.sales.filter(s => s.waiterId === window.state.currentUser.id);

            if (salesToShow.length === 0) {
                targetList.innerHTML = `<p class="text-gray-400 text-sm">No sales recorded yet.</p>`;
                return;
            }
            const reversedSales = [...salesToShow].sort((a,b) => b.date.seconds - a.date.seconds);
            targetList.innerHTML = reversedSales.map(sale => {
                const itemsHtml = sale.items.map(item => `<li>${item.quantity} x ${sanitizeInput(item.name)}</li>`).join('');
                const transactionCode = sale.transactionCode ? `<p class="text-xs text-gray-400">${sanitizeInput(sale.paymentMethod)}: ${sanitizeInput(sale.transactionCode)}</p>` : '';
                let paymentMethodClass = 'bg-green-500';
                if (sale.paymentMethod === 'M-PESA') paymentMethodClass = 'bg-emerald-500';
                if (sale.paymentMethod === 'Card') paymentMethodClass = 'bg-blue-500';
                return `<div class="bg-gray-700 p-3 rounded-md border border-gray-600">
                    <div class="flex justify-between items-start">
                        <div>
                            <p class="font-bold">${sanitizeInput(sale.waiterName)}</p>
                            <p class="text-sm text-gray-400">${new Date(sale.date.seconds * 1000).toLocaleString()}</p>
                            ${transactionCode}
                        </div>
                        <div class="text-right">
                            <p class="font-semibold text-lg text-green-400">Ksh ${sale.total.toFixed(2)}</p>
                            <p class="text-xs font-medium text-white px-2 py-1 rounded-full ${paymentMethodClass}">${sanitizeInput(sale.paymentMethod)}</p>
                        </div>
                    </div>
                    <ul class="text-sm list-disc list-inside mt-2 text-gray-300">${itemsHtml}</ul>
                </div>`;
            }).join('');
        }

        function renderSettings() {
            const isAdmin = window.state.currentUser.role === 'admin';
            document.getElementById('business-settings-section').style.display = isAdmin ? 'block' : 'none';
            document.getElementById('data-management-section').style.display = isAdmin ? 'block' : 'none';
            if (isAdmin) {
                document.getElementById('business-name').value = sanitizeInput(window.state.settings.name || '');
                document.getElementById('mpesa-till').value = sanitizeInput(window.state.settings.mpesaTill || '');
                document.querySelector('#business-id-display p').textContent = sanitizeInput(window.state.currentUser.businessId);
            }

            const securitySection = document.getElementById('security-heading').closest('section');
            let requestBtn = document.getElementById('request-deactivation-btn');

            if (window.state.currentUser.role === 'waiter') {
                if (!requestBtn) {
                    requestBtn = document.createElement('button');
                    requestBtn.id = 'request-deactivation-btn';
                    requestBtn.className = 'w-full bg-yellow-700 text-white py-2 rounded-lg shadow hover:bg-yellow-800 transition mt-4';
                    requestBtn.textContent = 'Request Account Deactivation';
                    securitySection.appendChild(requestBtn);
                }
            } else {
                if (requestBtn) {
                    requestBtn.remove();
                }
            }
        }
        function updateOnlineStatus() {
            const online = navigator.onLine;
            let statusHtml = `<div class="w-3 h-3 ${online ? 'bg-green-500' : 'bg-red-500'} rounded-full animate-pulse"></div><span class="text-sm font-medium text-gray-400">${online ? 'Online' : 'Offline'}</span>`;

            const pendingCount = window.state.pendingSales.length;
            if (pendingCount > 0) {
                statusHtml += `<span class="ml-3 text-xs font-semibold bg-yellow-500 text-yellow-900 px-2 py-1 rounded-full">${pendingCount} Pending</span>`;
            }

            onlineStatusIndicator.innerHTML = statusHtml;
        }

        function generateReceiptHtml(bill, isCopy = false) {
            if (!bill) return '';
            const total = bill.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            const copyText = isCopy ? `<p style="text-align: center; font-weight: bold; margin: 10px 0;">*** COPY ***</p>` : '';
            return `
                <div style="font-family: 'Courier New', monospace; width: 280px; font-size: 12px; color: #000;">
                    <h2 style="text-align: center; font-size: 16px; margin: 0 0 10px 0;">${sanitizeInput(window.state.settings.name)}</h2>
                    <p style="text-align: center; margin: 0;">Bill for: ${sanitizeInput(bill.name)}</p>
                    <p style="text-align: center; margin: 0;">Served by: ${sanitizeInput(bill.waiterName)}</p>
                    <p style="text-align: center; margin: 0; font-size: 10px;">${new Date().toLocaleString('en-GB')}</p>
                    ${copyText}
                    <hr style="border: none; border-top: 1px dashed #000; margin: 10px 0;">
                    <table style="width: 100%; border-collapse: collapse; font-size: 11px;">
                        <thead>
                            <tr>
                                <th style="text-align: left; padding: 2px;">Item</th>
                                <th style="text-align: center; padding: 2px;">Qty</th>
                                <th style="text-align: right; padding: 2px;">Price</th>
                                <th style="text-align: right; padding: 2px;">Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${bill.items.map(item => `
                                <tr>
                                    <td style="padding: 2px; max-width: 140px; word-wrap: break-word;">${sanitizeInput(item.name)}</td>
                                    <td style="text-align: center; padding: 2px;">${item.quantity}</td>
                                    <td style="text-align: right; padding: 2px;">${item.price.toFixed(0)}</td>
                                    <td style="text-align: right; padding: 2px;">${(item.price * item.quantity).toFixed(0)}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                    <hr style="border: none; border-top: 1px dashed #000; margin: 10px 0;">
                    <div style="text-align: right; font-size: 16px; font-weight: bold;">
                        <p style="margin: 0;">TOTAL: Ksh ${total.toFixed(2)}</p>
                    </div>
                    <p style="text-align: center; margin-top: 20px; font-size: 10px;">Thank you for your business!</p>
                    <p style="text-align: center; margin: 0; font-size: 10px;">M-PESA Till: ${sanitizeInput(window.state.settings.mpesaTill || 'N/A')}</p>
                </div>
            `;
        }

        async function populateWaiterSelectForBusiness(businessId) {
            const waiterUsernameSelect = document.getElementById('waiter-username');
            waiterUsernameSelect.innerHTML = '<option value="">Loading...</option>';
            waiterUsernameSelect.disabled = true;
            if (!businessId) {
                waiterUsernameSelect.innerHTML = '<option value="">Enter Business ID first</option>';
                return;
            }
            try {
                const q = query(collection(db, "users"), where("businessId", "==", businessId), where("role", "==", "waiter"), where("isDeleted", "==", false));
                const querySnapshot = await getDocs(q);
                const waiters = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                if (waiters.length > 0) {
                    waiterUsernameSelect.innerHTML = '<option value="">Select your name</option>';
                    waiters.forEach(user => {
                        const option = document.createElement('option');
                        option.value = user.id;
                        option.textContent = sanitizeInput(user.name);
                        waiterUsernameSelect.appendChild(option);
                    });
                    waiterUsernameSelect.disabled = false;
                } else {
                    waiterUsernameSelect.innerHTML = '<option value="">No waiters found for this ID</option>';
                }
            } catch (error) {
                console.error("Error fetching waiters:", error);
                showUserError('waiter-login-error', 'Error loading staff. Please try again.');
                waiterUsernameSelect.innerHTML = '<option value="">Error loading staff</option>';
            }
        }
        let appEventListenersSetup = false;
        function setupAppEventListeners(auth, db) {
            if (appEventListenersSetup) return;
            console.log("Setting up main application event listeners...");
            openBillsContainer.addEventListener('click', e => {
                const newBillBtn = e.target.closest('#new-bill-btn');
                const openBillBtn = e.target.closest('.open-bill-btn');
                if (newBillBtn) {
                    handleNewBill(db);
                } else if (openBillBtn) {
                    const billId = openBillBtn.dataset.billId;
                    handleOpenBill(billId);
                }
            });
            productGrid.addEventListener('click', e => {
                const card = e.target.closest('.product-card');
                if (card && card.dataset.productId && !card.classList.contains('opacity-50')) { // Only click if not out of stock
                    handleAddToCart(card.dataset.productId);
                }
            });
            productCategoriesNav.addEventListener('click', e => {
                const target = e.target.closest('button');
                if (target) {
                    productCategoriesNav.querySelectorAll('button').forEach(btn => btn.classList.remove('active'));
                    target.classList.add('active');
                    renderProductsGrid(target.dataset.category);
                }
            });

            cartDiv.addEventListener('click', e => {
                const target = e.target.closest('button');
                if (!target) return;
                const productId = target.dataset.id;
                const action = target.dataset.action;
                if (action === 'increase-qty') handleUpdateQuantity(productId, 1);
                if (action === 'decrease-qty') handleUpdateQuantity(productId, -1);
            });
            saveBillBtn.addEventListener('click', () => handleSaveToBill(db));
            clearCartBtn.addEventListener('click', () => handleClearCart(db));

            payCashBtn.addEventListener('click', () => handlePreSaleShiftCheck(db, () => handleProcessSale(db, 'Cash')));
            payMpesaBtn.addEventListener('click', () => handlePreSaleShiftCheck(db, () => promptMpesaPayment(db)));
            payCardBtn.addEventListener('click', () => handlePreSaleShiftCheck(db, () => promptCardPayment(db)));

            printBillBtn.addEventListener('click', handlePrintBill);
            printPreviewModal.addEventListener('click', e => {
                const target = e.target.closest('button');
                if(!target) return;
                if(target.id === 'print-preview-close') printPreviewModal.classList.add('hidden');
                if(target.id === 'print-preview-final') {
                    const bill = window.state.openBills.find(b => b.id === window.state.currentBillId);
                    if (!bill) return;
                    printArea.innerHTML = generateReceiptHtml(bill, false);
                    window.print();
                    printPreviewModal.classList.add('hidden');
                    // Mark the bill as paid or close it after printing if it's not an open bill
                    // This logic depends on whether printing means the bill is finalized.
                    // For now, it just prints.
                }
                if(target.id === 'print-preview-copy') {
                    const bill = window.state.openBills.find(b => b.id === window.state.currentBillId);
                    if (!bill) return;
                    printArea.innerHTML = generateReceiptHtml(bill, true);
                    window.print();
                }
            });
            shiftManagementPanel.addEventListener('click', e => {
                const target = e.target.closest('button');
                if (!target) return;
                const action = target.dataset.action;
                if (action === 'start-shift') handleStartShift(db);
                if (action === 'end-shift') handleEndShift(db);
            });
            tabsContainer.addEventListener('click', e => {
                const clickedTab = e.target.closest('button');
                if (!clickedTab) return;

                tabsContainer.querySelectorAll('button').forEach(tab => tab.classList.remove('active'));
                clickedTab.classList.add('active');
                // Hide all tab contents first
                Object.values(tabContents).forEach(content => content.classList.add('hidden'));
                // Show only the clicked tab's content
                const contentId = clickedTab.dataset.tab;
                if (tabContents[contentId]) {
                    tabContents[contentId].classList.remove('hidden');
                    // Re-render only the active tab's specific content to optimize
                    if (contentId === 'products') renderProductListManagement();
                    if (contentId === 'categories') renderCategoryManagement();
                    if (contentId === 'waiters') renderUserListManagement();
                    if (contentId === 'my-sales') renderSalesHistory(false);
                    if (contentId === 'all-sales') renderSalesHistory(true);
                    if (contentId === 'settings') renderSettings();
                    if (contentId === 'dashboard') renderDashboard();
                }
            });

            document.getElementById('add-product-form').addEventListener('submit', (e) => handleAddProduct(e, db));
            document.getElementById('add-category-form').addEventListener('submit', (e) => handleAddCategory(e, db));
            document.getElementById('add-user-btn').addEventListener('click', () => handleAddUser(db));
            productListManagement.addEventListener('click', async e => {
                const button = e.target.closest('button');
                if(!button) return;
                const id = button.dataset.id;
                const action = button.dataset.action;
                if (action === 'edit-product') {
                    const product = window.state.products.find(p => p.id === id);
                    promptEditProduct(db, product);
                }
                if (action === 'delete-product') {
                    showModal('Confirm Deletion', 'Are you sure you want to delete this product?', async () => {
                        try {
                            await deleteDoc(doc(db, "products", id));
                            showModal('Success', 'Product deleted successfully.', () => true, false);
                            return true;
                        } catch (error) {
                            console.error("Error deleting product:", error);
                            showModal('Error', `Failed to delete product: ${error.message}.`, () => true, false);
                            return false;
                        }
                    });
                }
                if (action === 'toggle-favorite') {
                    try {
                        const product = window.state.products.find(p => p.id === id);
                        await updateDoc(doc(db, "products", id), { isFavorite: !product.isFavorite });
                    } catch (error) {
                        console.error("Error toggling favorite:", error);
                        showModal('Error', `Failed to update favorite status: ${error.message}.`, () => true, false);
                    }
                }
            });

            categoryListManagement.addEventListener('click', e => {
                const button = e.target.closest('button');
                if(!button) return;
                const id = button.dataset.id;
                const name = button.dataset.name;
                const action = button.dataset.action;
                if (action === 'edit-category') promptEditCategory(db, {id, name});
                if (action === 'delete-category') handleDeleteCategory(db, {id, name});
            });
            userListManagement.addEventListener('click', e => {
                const button = e.target.closest('button');
                if(!button) return;
                const userId = button.dataset.id;
                const userName = button.dataset.name;
                const action = button.dataset.action;
                if (action === 'soft-delete-user') {
                    handleSoftDeleteUser(db, userId, userName);
                }
                if (action === 'restore-user') {
                    handleRestoreUser(db, userId);
                }
                if (action === 'reset-password') {
                    promptResetPassword(db, userId, userName);
                }
                if (action === 'permanent-delete-user') {
                    handlePermanentDeleteUser(db, userId, userName);
                }
            });
            // Report Section Event Listeners
            document.querySelector('#tab-content-reports').addEventListener('click', e => {
                const target = e.target.closest('button');
                if (!target) return;

                if (target.id === 'generate-report-btn') handleGenerateReport();
                if (target.dataset.range === 'daily') handleGenerateReport('daily');
                if (target.dataset.range === '90days') handleGenerateReport('90days');
                if (target.id === 'download-summary-btn') handleDownloadReport('summary');
                if (target.id === 'download-full-btn') handleDownloadReport('full');
                if (target.id === 'print-report-btn') handlePrintReport();
            });
            document.getElementById('save-settings-btn').addEventListener('click', () => handleSaveSettings(db));
            document.getElementById('change-my-password-btn').addEventListener('click', () => promptChangePassword(auth));
            document.getElementById('clear-transactions-btn').addEventListener('click', () => promptClearTransactions(db));

            document.getElementById('tab-content-settings').addEventListener('click', e => {
                if(e.target.id === 'request-deactivation-btn') {
                    handleRequestDeactivation(db);
                }
            });
            window.addEventListener('online', () => {
                updateOnlineStatus();
                syncPendingSales(db); // Attempt sync immediately when online
            });
            window.addEventListener('offline', updateOnlineStatus);

            monthlyPlanBtn.addEventListener('click', () => {
                paymentFormContainer.classList.remove('hidden');
            });
            yearlyPlanBtn.addEventListener('click', () => {
                paymentFormContainer.classList.remove('hidden');
            });
            payNowBtn.addEventListener('click', () => {
                const mpesaNumber = sanitizeInput(paymentMpesaNumberInput.value);
                if (!mpesaNumber || mpesaNumber.length < 10) {
                    showModal('Payment Error', 'Please enter a valid M-PESA phone number.', () => true, false);
                    return;
                }
                showModal('Payment Initiated', `Ready to start payment for number: ${mpesaNumber}. (This is a mock payment flow.)`, () => true, false);
                console.log("User wants to pay with number:", mpesaNumber);
            });
            appEventListenersSetup = true;
            console.log("Application event listeners are now active.");
        }

        async function handleNewBill(db) {
            const content = `<div><label for="bill-name" class="block text-sm font-medium text-gray-300">Enter Table Number or Customer Name</label><input type="text" id="bill-name" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600 rounded-md" placeholder="e.g., Table 5" required></div>`;
            showModal('Create New Bill', content, async () => {
                const name = sanitizeInput(document.getElementById('bill-name').value.trim());
                if (name) {
                    const newBill = {
                        name: name,
                        items: [],
                        waiterId: window.state.currentUser.id,
                        waiterName: window.state.currentUser.name,
                        createdAt: serverTimestamp(),
                        businessId: window.state.currentUser.businessId
                    };
                    try {
                        const docRef = await addDoc(collection(db, "openBills"), newBill);
                        handleOpenBill(docRef.id);
                        return true;
                    } catch (error) {
                        console.error("Error creating new bill:", error);
                        showModal('Error', `Failed to create new bill: ${error.message}.`, () => true, false);
                        return false;
                    }
                }
                showModal('Error', 'Bill name cannot be empty.', () => true, false);
                return false;
            });
        }
        function handleOpenBill(billId) {
            const bill = window.state.openBills.find(b => b.id === billId);
            if (!bill) {
                showModal('Error', 'Selected bill not found.', () => true, false);
                return;
            }
            window.state.currentBillId = billId;
            // Deep copy items to avoid modifying the original bill in state directly
            window.state.cart = JSON.parse(JSON.stringify(bill.items));
            currentBillInfo.textContent = `Bill: ${sanitizeInput(bill.name)}`;
            renderCart();
            renderOpenBills();
        }

        function handleAddToCart(productId) {
            if (!window.state.currentBillId) {
                showModal('Action Required', 'Please create a new bill or select an existing one before adding items.', () => true, false);
                return;
            }
            const product = window.state.products.find(p => p.id === productId);
            if (!product) {
                console.warn(`Product with ID ${productId} not found.`);
                return;
            }
            if (product.stock <= 0) {
                showModal('Out of Stock', 'This item is currently out of stock.', () => true, false);
                return;
            }

            const cartItem = window.state.cart.find(item => item.productId === productId);
            if (cartItem) {
                if (product.stock > cartItem.quantity) {
                    cartItem.quantity++;
                } else {
                    showModal('Out of Stock', 'No more stock available for this item.', () => true, false);
                }
            } else {
                window.state.cart.push({ productId: product.id, name: product.name, price: product.price, quantity: 1 });
            }
            renderCart();
        }
        function handleUpdateQuantity(productId, change) {
            const cartItem = window.state.cart.find(item => item.productId === productId);
            if (!cartItem) return;
            const product = window.state.products.find(p => p.id === productId);

            if (change > 0) {
                if (product.stock > cartItem.quantity) {
                    cartItem.quantity += change;
                } else {
                    showModal('Out of Stock', 'No more stock available for this item.', () => true, false);
                }
            } else { // Decreasing quantity
                cartItem.quantity += change;
            }

            if (cartItem.quantity <= 0) {
                window.state.cart = window.state.cart.filter(item => item.productId !== productId);
            }
            renderCart();
        }
        async function handleSaveToBill(db) {
            if (!window.state.currentBillId || window.state.cart.length === 0) {
                showModal('No Items', 'There are no items in the current order to save.', () => true, false);
                return;
            }
            const billRef = doc(db, "openBills", window.state.currentBillId);
            try {
                await updateDoc(billRef, { items: window.state.cart });
                showModal('Bill Saved', `Order saved to bill: ${sanitizeInput(window.state.openBills.find(b => b.id === window.state.currentBillId)?.name || 'Current Bill')}`, () => true, false);
                window.state.cart = [];
                window.state.currentBillId = null;
                currentBillInfo.textContent = '';
                renderCart();
                renderOpenBills();
            } catch (error) {
                console.error("Error saving to bill:", error);
                showModal('Error', `Failed to save bill: ${error.message}.`, () => true, false);
            }
        }
        async function handleClearCart(db) {
            if(window.state.currentBillId) {
                showModal('Confirm Close Bill', 'Are you sure you want to clear the current order and close this bill?', async () => {
                    try {
                        await deleteDoc(doc(db, "openBills", window.state.currentBillId));
                        window.state.cart = [];
                        window.state.currentBillId = null;
                        currentBillInfo.textContent = '';
                        renderCart();
                        renderOpenBills();
                        showModal('Bill Closed', 'Bill has been closed and cleared.', () => true, false);
                        return true;
                    } catch (error) {
                        console.error("Error clearing cart/closing bill:", error);
                        showModal('Error', `Failed to close bill: ${error.message}.`, () => true, false);
                        return false;
                    }
                });
            } else {
                window.state.cart = [];
                window.state.currentBillId = null;
                currentBillInfo.textContent = '';
                renderCart();
                showModal('Cart Cleared', 'Your current order has been cleared.', () => true, false);
            }
        }
        async function handleStartShift(db) {
            const waiterId = window.state.currentUser.id;
            const myActiveShift = window.state.shifts.find(s => s.waiterId === waiterId && !s.end);
            if (myActiveShift) {
                showModal('Shift Active', 'A shift is already active.', () => true, false);
                return;
            }
            const newShift = {
                waiterId: waiterId,
                waiterName: window.state.currentUser.name,
                start: new Date().toISOString(),
                end: null,
                sales: [],
                businessId: window.state.currentUser.businessId
            };
            try {
                await addDoc(collection(db, "shifts"), newShift);
                showModal('Shift Started', 'Your shift has successfully started.', () => true, false);
            } catch (error) {
                console.error("Error starting shift:", error);
                showModal('Error', `Failed to start shift: ${error.message}.`, () => true, false);
            }
        }
        async function handleEndShift(db) {
            const waiterId = window.state.currentUser.id;
            const myActiveShift = window.state.shifts.find(s => s.waiterId === waiterId && !s.end);
            if (!myActiveShift) {
                showModal('No Active Shift', 'There is no active shift to end.', () => true, false);
                return;
            }

            showModal('Confirm End Shift', 'Are you sure you want to end your current shift?', async () => {
                const shiftRef = doc(db, "shifts", myActiveShift.id);
                try {
                    await updateDoc(shiftRef, { end: new Date().toISOString() });
                    const totalSales = myActiveShift.sales.reduce((t, s) => t + s.total, 0);
                    showModal('Shift Ended', `<p>Shift ended successfully.</p><p>Total Sales This Shift: Ksh ${totalSales.toFixed(2)}</p>`, () => true, false);
                    return true;
                } catch (error) {
                    console.error("Error ending shift:", error);
                    showModal('Error', `Failed to end shift: ${error.message}.`, () => true, false);
                    return false;
                }
            });
        }
        function handlePreSaleShiftCheck(db, callback) {
            const waiterId = window.state.currentUser.id;
            const myActiveShift = window.state.shifts.find(s => s.waiterId === waiterId && !s.end);
            if (!myActiveShift) {
                showModal('Start Shift?', 'You must start a shift to record sales. Start a shift now?', async () => {
                    try {
                        await handleStartShift(db); // Await here to ensure shift is started before callback
                        callback();
                        return true;
                    } catch (error) {
                        // Error handling for start shift inside the modal callback
                        console.error("Failed to start shift before sale:", error);
                        showModal('Error', 'Could not start shift. Please try again.', () => true, false);
                        return false;
                    }
                }, true); // showConfirm = true
            } else {
                callback();
            }
        }
        async function handleProcessSale(db, paymentMethod, transactionCode = '') {
            if (window.state.cart.length === 0) return;
            const total = window.state.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            const waiterId = window.state.currentUser.id;
            const myActiveShift = window.state.shifts.find(s => s.waiterId === waiterId && !s.end);
            if (!myActiveShift && navigator.onLine) { // Check if online AND no shift, to prevent this modal when offline
                showModal('Shift Not Active', 'You must have an active shift to record sales. Please start your shift.', () => true, false);
                return;
            }

            const sale = {
                items: JSON.parse(JSON.stringify(window.state.cart)), // Deep copy cart items
                total: total,
                paymentMethod: paymentMethod,
                transactionCode: sanitizeInput(transactionCode),
                date: serverTimestamp(), // Use server timestamp for accuracy
                waiterId: waiterId,
                waiterName: window.state.currentUser.name,
                shiftId: myActiveShift ? myActiveShift.id : 'N/A',
                businessId: window.state.currentUser.businessId,
                originalBillId: window.state.currentBillId,
                offlineTimestamp: new Date().toISOString(), // Client-side timestamp for offline tracking
                status: (paymentMethod === 'M-PESA' && transactionCode.includes('STK_PUSH_PENDING')) ? 'pending' : 'completed' // Add status field
            };

            if (!navigator.onLine) {
                console.log("App is offline. Queuing sale.");
                window.state.pendingSales.push(sale);
                savePendingSalesToLocal();

                // Optimistically update stock and remove bill from local state for offline mode
                sale.items.forEach(cartItem => {
                    const product = window.state.products.find(p => p.id === cartItem.productId);
                    if (product) {
                        product.stock -= cartItem.quantity; // Local stock update
                    }
                });
                if (window.state.currentBillId) {
                    window.state.openBills = window.state.openBills.filter(b => b.id !== window.state.currentBillId);
                }
                showModal('Sale Recorded (Offline)', `<div class="text-center"><i class="fas fa-wifi-slash text-5xl text-yellow-500 mb-4"></i><p class="text-2xl font-bold">Offline Sale!</p><p class="text-gray-300">Paid Ksh ${sale.total.toFixed(2)} via ${paymentMethod}</p><p class="text-yellow-400 text-sm mt-2">Sale saved locally and will sync when online.</p></div>`, () => true, false);

            } else {
                console.log("App is online. Processing sale directly.");
                const batch = writeBatch(db);

                // Update product stock and add to sales collection
                for (const cartItem of sale.items) {
                    const productRef = doc(db, "products", cartItem.productId);
                    const product = window.state.products.find(p => p.id === cartItem.productId); // Use local state for current stock calculation
                    if (product) {
                        const newStock = Math.max(0, product.stock - cartItem.quantity);
                        batch.update(productRef, { stock: newStock });
                    } else {
                         console.warn(`Product ${cartItem.productId} not found during online sale. Stock not updated.`);
                    }
                }

                const saleRef = doc(collection(db, "sales"));
                batch.set(saleRef, sale);

                // Update shift sales
                if (myActiveShift) {
                    const shiftRef = doc(db, "shifts", myActiveShift.id);
                    // Fetch the latest shift data to avoid stale data conflicts
                    const latestShiftDoc = await getDoc(shiftRef);
                    if (latestShiftDoc.exists()) {
                        const currentSales = latestShiftDoc.data().sales || [];
                        const updatedSales = [...currentSales, {id: saleRef.id, total: sale.total}];
                        batch.update(shiftRef, { sales: updatedSales });
                    } else {
                        console.warn(`Active shift ${myActiveShift.id} not found during online sale. Shift sales not updated.`);
                    }
                }
                // Delete open bill if applicable
                if (window.state.currentBillId) {
                    const billRef = doc(db, "openBills", window.state.currentBillId);
                    batch.delete(billRef);
                }

                try {
                    await batch.commit();
                    let modalContent = `<div class="text-center"><i class="fas fa-check-circle text-5xl text-green-500 mb-4"></i><p class="text-2xl font-bold">Transaction Closed</p><p class="text-gray-300">Paid Ksh ${sale.total.toFixed(2)} via ${paymentMethod}</p></div>`;
                    showModal('Sale Complete!', modalContent, () => true, false);
                } catch (error) {
                    console.error("Online sale processing failed:", error);
                    // Fallback to offline queue if online commit fails
                    window.state.pendingSales.push(sale);
                    savePendingSalesToLocal();
                    showModal('Network Error', 'Could not complete sale. It has been saved and will be retried automatically when your connection is stable.', () => true, false);
                }
            }
            // Reset cart and current bill state
            window.state.cart = [];
            window.state.currentBillId = null;
            currentBillInfo.textContent = '';
            renderAllUI(); // Re-render to reflect changes
        }

        async function promptMpesaPayment(db) {
            const total = window.state.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            let modalContent = `<p class="text-center text-gray-400">Total Amount</p><p class="text-3xl font-bold text-center text-green-400 mb-4">Ksh ${total.toFixed(2)}</p>
                <p class="text-center font-semibold">Customer to pay to Till No: <br><strong class="text-xl">${sanitizeInput(window.state.settings.mpesaTill || 'Not Set')}</strong></p><hr class="my-4 border-gray-600">
                <div>
                    <label for="mpesa-phone-number" class="block text-sm font-medium text-gray-300">Customer M-PESA Phone Number (e.g., 2547...)</label>
                    <input type="tel" id="mpesa-phone-number" placeholder="e.g., 254712345678" class="mt-1 block w-full border p-2 bg-gray-700 border-gray-600 rounded-md" required>
                    <p id="mpesa-phone-error" class="text-red-500 text-sm mt-1 hidden"></p>
                </div>
                <div class="mt-4">
                    <label for="mpesa-code" class="block text-sm font-medium text-gray-300">Enter M-PESA Transaction Code (optional fallback)</label>
                    <input type="text" id="mpesa-code" class="mt-1 block w-full border p-2 uppercase bg-gray-700 border-gray-600 rounded-md" placeholder="e.g., RGA123ABC4">
                    <p id="mpesa-error" class="text-red-500 text-sm mt-1 hidden"></p>
                </div>`;

            showModal('M-PESA Payment', modalContent, async () => {
                const phoneNumberInput = document.getElementById('mpesa-phone-number');
                const mpesaCodeInput = document.getElementById('mpesa-code');
                const phoneErrorP = document.getElementById('mpesa-phone-error');
                const mpesaErrorP = document.getElementById('mpesa-error');

                const phoneNumber = phoneNumberInput.value.trim();
                const mpesaCode = mpesaCodeInput.value.trim();

                phoneErrorP.classList.add('hidden');
                mpesaErrorP.classList.add('hidden');

                if (!phoneNumber || !phoneNumber.match(/^2547\d{8}$/)) {
                    phoneErrorP.textContent = 'Please enter a valid M-PESA phone number (e.g., 2547...).';
                    phoneErrorP.classList.remove('hidden');
                    phoneNumberInput.focus();
                    return false;
                }

                // If the user manually enters a code, process it directly
                if (mpesaCode) {
                    handleProcessSale(db, 'M-PESA', mpesaCode.toUpperCase());
                    return true;
                }

                // Otherwise, initiate STK Push via Cloud Function
                showModal('Processing M-Pesa...', `<div class="text-center"><i class="fas fa-spinner fa-spin text-5xl text-blue-500 mb-4"></i><p class="text-2xl font-bold">Initiating Payment...</p><p class="text-gray-300">Sending STK Push to ${sanitizeInput(phoneNumber)}. Please wait for the prompt on the customer's phone.</p><p class="text-sm text-gray-400 mt-2">Do NOT close this application.</p></div>`, () => true, false); // No confirm button, auto-closes or waits

                try {
                    // Get functions instance and callable function
                    const functions = getFunctions(app); // Use 'app' to initialize functions
                    const initiateMpesaPaymentCallable = httpsCallable(functions, 'initiateMpesaPayment');

                    const result = await initiateMpesaPaymentCallable({
                        businessId: window.state.currentUser.businessId,
                        amount: total,
                        phoneNumber: phoneNumber,
                        billId: window.state.currentBillId,
                        waiterId: window.state.currentUser.id,
                        waiterName: window.state.currentUser.name,
                        cartItems: window.state.cart // Pass cart items to the function
                    });

                    if (result.data.success) {
                        // Now, listen for the status of this specific transaction in Firestore
                        listenForMpesaTransaction(db, result.data.checkoutRequestId, window.state.currentBillId);

                        showModal('M-Pesa STK Push Sent', `Please ask the customer to enter their M-Pesa PIN on their phone to complete the Ksh ${total.toFixed(2)} payment. The system will auto-update upon confirmation.`, () => {
                            // Allow closing, but the Firestore listener will still update the state
                            return true;
                        }, false);
                    } else {
                        console.error("STK Push callable function failed:", result.data.error);
                        showModal('M-Pesa Error', `Failed to initiate M-Pesa payment: ${result.data.message || 'Unknown error'}`, () => true, false);
                        return false;
                    }
                } catch (error) {
                    console.error("Error calling initiateMpesaPayment Cloud Function:", error);
                    showModal('M-Pesa Error', `A network error occurred or server error: ${error.message}. Please check console for details.`, () => true, false);
                    return false;
                }
                return true; // Return true to close the initial M-Pesa input modal after STK push attempt
            }, false); // Set to false to remove the "Confirm" button initially, as we're doing STK Push
        }

        // Add this new function to your JavaScript (e.g., near other utility functions)
        function listenForMpesaTransaction(db, checkoutRequestId, billId) {
            const transactionRef = doc(db, "mpesaTransactions", checkoutRequestId);
            console.log("Listening for M-Pesa transaction updates for:", checkoutRequestId);

            const unsubscribeMpesa = onSnapshot(transactionRef, (docSnap) => {
                if (docSnap.exists()) {
                    const transactionData = docSnap.data();
                    console.log("M-Pesa transaction status update:", transactionData.status);

                    if (transactionData.status === 'completed' && transactionData.mpesaReceiptNumber) {
                        showModal('M-Pesa Payment Success!', `Payment for Ksh ${transactionData.amountPaid.toFixed(2)} completed successfully! Transaction ID: ${sanitizeInput(transactionData.mpesaReceiptNumber)}.`, () => {
                            // Sale finalized and bill deleted by Cloud Function, just clear frontend state
                            window.state.cart = [];
                            window.state.currentBillId = null;
                            currentBillInfo.textContent = '';
                            renderAllUI(); // Re-render to reflect cleared cart and open bills
                            return true;
                        }, false);
                        unsubscribeMpesa(); // Stop listening
                        // Remove the pending mpesa transaction from your pendingSales array if applicable.
                        window.state.pendingSales = window.state.pendingSales.filter(sale => sale.transactionCode !== transactionData.mpesaReceiptNumber);
                        savePendingSalesToLocal();

                    } else if (transactionData.status === 'failed') {
                        showModal('M-Pesa Payment Failed', `Payment failed: ${sanitizeInput(transactionData.errorMessage || 'Transaction cancelled or failed.')}. Please try again.`, () => true, false);
                        unsubscribeMpesa();
                    }
                } else {
                    console.warn("M-Pesa transaction document no longer exists:", checkoutRequestId);
                    unsubscribeMpesa(); // Document deleted, stop listening
                }
            }, (error) => {
                console.error("Error listening to M-Pesa transaction:", error);
                showModal('Error', `Failed to track M-Pesa payment status: ${error.message}.`, () => true, false);
            });
            // Add this unsubscribe function to your global list to be cleaned up on logout
            window.unsubscribes.push(unsubscribeMpesa);
        }

        function promptCardPayment(db) {
            const total = window.state.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            let modalContent = `<p class="text-center text-gray-400">Total Amount</p><p class="text-3xl font-bold text-center text-blue-400 mb-4">Ksh ${total.toFixed(2)}</p><p class="text-center font-semibold">Process payment on the physical card terminal.</p><hr class="my-4 border-gray-600"><div><label for="card-code" class="block text-sm font-medium text-gray-300">Enter Card Transaction Code / Ref No.</label><input type="text" id="card-code" class="mt-1 block w-full border p-2 uppercase bg-gray-700 border-gray-600 rounded-md" placeholder="e.g., 123456" required><p id="card-error" class="text-red-500 text-sm mt-1 hidden">Code cannot be empty.</p></div>`;
            showModal('Card Payment', modalContent, () => {
                const codeInput = document.getElementById('card-code');
                const errorP = document.getElementById('card-error');
                const cardCode = codeInput.value.trim();
                if (cardCode) {
                    handleProcessSale(db, 'Card', cardCode.toUpperCase());
                    return true;
                } else {
                    errorP.classList.remove('hidden');
                    codeInput.focus();
                    return false;
                }
            });
        }

        function handlePrintBill() {
            if (!window.state.currentBillId) {
                showModal("No Bill Selected", "Please select a bill to print.", () => true, false);
                return;
            }
            const bill = window.state.openBills.find(b => b.id === window.state.currentBillId);
            if (!bill) {
                showModal("Error", "Selected bill not found in the system.", () => true, false);
                return;
            }
            const receiptHtml = generateReceiptHtml(bill, false);
            printPreviewArea.innerHTML = receiptHtml;
            printPreviewModal.classList.remove('hidden');
        }

        async function handleAddProduct(e, db) {
            e.preventDefault();
            const form = e.target;
            const name = sanitizeInput(form.querySelector('#product-name').value);
            const price = parseFloat(form.querySelector('#product-price').value);
            const stock = parseInt(form.querySelector('#product-stock').value);
            const category = sanitizeInput(form.querySelector('#product-category').value);

            if (!name || isNaN(price) || price < 0 || isNaN(stock) || stock < 0) {
                showModal('Validation Error', 'Please enter valid product details (name, positive price, and non-negative stock).', () => true, false);
                return;
            }

            try {
                await addDoc(collection(db, "products"), {
                    name,
                    price,
                    stock,
                    category,
                    isFavorite: false,
                    businessId: window.state.currentUser.businessId
                });
                form.reset();
                showModal('Success', 'Product added successfully!', () => true, false);
            } catch (error) {
                console.error("Error adding product:", error);
                showModal('Error', `Failed to add product: ${error.message}.`, () => true, false);
            }
        }

        async function handleAddCategory(e, db) {
            e.preventDefault();
            const nameInput = e.target.querySelector('#category-name');
            const name = sanitizeInput(nameInput.value.trim());
            const exists = window.state.categories.some(c => c.name.toLowerCase() === name.toLowerCase());
            if (name && !exists) {
                try {
                    await addDoc(collection(db, "categories"), {
                        name,
                        businessId: window.state.currentUser.businessId
                    });
                    nameInput.value = '';
                    showModal('Success', 'Category added successfully!', () => true, false);
                } catch (error) {
                    console.error("Error adding category:", error);
                    showModal('Error', `Failed to add category: ${error.message}.`, () => true, false);
                }
            } else {
                showModal('Error', 'Category name cannot be empty or already exist.', () => true, false);
            }
        }
        function promptEditProduct(db, product) {
            if (!product) return;
            let categoryOptions = window.state.categories.map(c => `<option value="${sanitizeInput(c.name)}" ${c.name === product.category ? 'selected' : ''}>${sanitizeInput(c.name)}</option>`).join('');
            const content = `<input type="hidden" id="edit-product-id" value="${sanitizeInput(product.id)}">
                <div><label for="edit-product-name">Product Name</label><input type="text" id="edit-product-name" value="${sanitizeInput(product.name)}" class="mt-1 block w-full p-2 bg-gray-700 rounded-md"></div>
                <div class="mt-2"><label for="edit-product-price">Price (Ksh)</label><input type="number" id="edit-product-price" value="${product.price}" class="mt-1 block w-full p-2 bg-gray-700 rounded-md"></div>
                <div class="mt-2"><label for="edit-product-category">Category</label><select id="edit-product-category" class="mt-1 block w-full p-2 bg-gray-700 rounded-md">${categoryOptions}</select></div>
                <div class="mt-2"><label for="edit-product-stock">Stock</label><input type="number" id="edit-product-stock" value="${product.stock}" class="mt-1 block w-full p-2 bg-gray-700 rounded-md"></div>`;

            showModal('Edit Product', content, async () => {
                const id = document.getElementById('edit-product-id').value;
                const name = sanitizeInput(document.getElementById('edit-product-name').value);
                const price = parseFloat(document.getElementById('edit-product-price').value);
                const category = sanitizeInput(document.getElementById('edit-product-category').value);
                const stock = parseInt(document.getElementById('edit-product-stock').value);

                if (!name || isNaN(price) || price < 0 || isNaN(stock) || stock < 0) {
                    showModal('Validation Error', 'Please enter valid product details (name, positive price, and non-negative stock).', () => true, false);
                    return false;
                }

                try {
                    await updateDoc(doc(db, "products", id), { name, price, category, stock });
                    showModal('Success', 'Product updated successfully!', () => true, false);
                    return true;
                } catch (error) {
                    console.error("Error updating product:", error);
                    showModal('Error', `Failed to update product: ${error.message}.`, () => true, false);
                    return false;
                }
            });
        }

        function promptEditCategory(db, category) {
            const content = `<div><label for="edit-category-name">New Name for "${sanitizeInput(category.name)}"</label><input type="text" id="edit-category-name" value="${sanitizeInput(category.name)}" class="mt-1 block w-full p-2 bg-gray-700 rounded-md"></div>`;
            showModal('Edit Category', content, async () => {
                const newName = sanitizeInput(document.getElementById('edit-category-name').value.trim());
                const exists = window.state.categories.some(c => c.name.toLowerCase() === newName.toLowerCase() && c.id !== category.id);
                if (newName && !exists) {
                    try {
                        await updateDoc(doc(db, "categories", category.id), { name: newName });
                        showModal('Success', 'Category updated successfully!', () => true, false);
                        return true;
                    } catch (error) {
                        console.error("Error updating category:", error);
                        showModal('Error', `Failed to update category: ${error.message}.`, () => true, false);
                        return false;
                    }
                }
                showModal('Error', 'Category name cannot be empty or already exist.', () => true, false);
                return false;
            });
        }
        function handleDeleteCategory(db, category) {
            const productsInCategory = window.state.products.filter(p => p.category === category.name).length;
            if (productsInCategory > 0) {
                showModal('Cannot Delete', `You cannot delete "${sanitizeInput(category.name)}" because ${productsInCategory} product(s) are assigned to it. Please reassign or delete products first.`, () => true, false);
                return;
            }
            showModal('Confirm Deletion', `Are you sure you want to delete the "${sanitizeInput(category.name)}" category? This cannot be undone.`, async () => {
                try {
                    await deleteDoc(doc(db, "categories", category.id));
                    showModal('Success', 'Category deleted successfully!', () => true, false);
                    return true;
                } catch (error) {
                    console.error("Error deleting category:", error);
                    showModal('Error', `Failed to delete category: ${error.message}.`, () => true, false);
                    return false;
                }
            });
        }
        async function hashPassword(password) {
            // In a real application, you'd use a strong, server-side hashing library
            // For client-side demo purposes, this is a very basic, insecure "hash"
            // DO NOT USE THIS IN PRODUCTION
            const encoder = new TextEncoder();
            const data = encoder.encode(password);
            const hashBuffer = await crypto.subtle.digest('SHA-256', data);
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            const hashedPassword = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
            return hashedPassword;
        }

        function handleAddUser(db) {
            if (window.state.currentUser.role !== 'admin') {
                showModal('Permission Denied', 'Only admins can add new staff.', () => true, false);
                return;
            }
            const content = `<div><label>New Waiter Name</label><input type="text" id="new-user-name-modal" class="mt-1 w-full p-2 bg-gray-700 rounded-md"></div>
                <div class="mt-2"><label>Password / PIN</label><input type="password" id="temp-password" class="mt-1 w-full p-2 bg-gray-700 rounded-md"></div>
                <p id="addUserError" class="text-red-500 text-sm mt-1 hidden"></p>`;

            showModal('Add New Waiter', content, async () => {
                const name = sanitizeInput(document.getElementById('new-user-name-modal').value.trim());
                const password = document.getElementById('temp-password').value.trim(); // Get raw password for hashing
                const errorP = document.getElementById('addUserError');

                if (!name || !password) {
                    errorP.textContent = 'Both fields are required.';
                    errorP.classList.remove('hidden');
                    return false;
                }
                if (password.length < 4) {
                    errorP.textContent = 'Password must be at least 4 characters.';
                    errorP.classList.remove('hidden');
                    return false;
                }

                try {
                    const hashedPassword = await hashPassword(password); // Hash the password
                    await addDoc(collection(db, "users"), {
                        name,
                        password: hashedPassword, // Store the hashed password
                        role: 'waiter',
                        isDeleted: false,
                        createdAt: new Date().toISOString(),
                        businessId: window.state.currentUser.businessId
                    });
                    showModal('Success', 'Waiter added successfully!', () => true, false);
                    return true;
                } catch (error) {
                    console.error("Error adding user:", error);
                    showModal('Error', `Failed to add waiter: ${error.message}.`, () => true, false);
                    return false;
                }
            });
        }
        function handleSoftDeleteUser(db, userId, userName) {
            if (window.state.currentUser.role !== 'admin') return;
            const user = window.state.users.find(u => u.id === userId);
            const title = user?.deactivationRequested ? 'Confirm Deactivation' : 'Deactivate Waiter';
            const message = user?.deactivationRequested
                ? `${sanitizeInput(userName)} has requested to be deactivated. Confirm this action?`
                : `Are you sure you want to deactivate ${sanitizeInput(userName)}? They will no longer be able to log in.`;
            showModal(title, message, async () => {
                try {
                    await updateDoc(doc(db, "users", userId), {
                        isDeleted: true,
                        deactivationRequested: deleteField() // Remove the deactivationRequested field
                    });
                    showModal('Success', `${sanitizeInput(userName)} has been deactivated.`, () => true, false);
                    return true;
                } catch (error) {
                    console.error("Error deactivating user:", error);
                    showModal('Error', `Failed to deactivate user: ${error.message}.`, () => true, false);
                    return false;
                }
            });
        }

        function handlePermanentDeleteUser(db, userId, userName) {
            if (window.state.currentUser.role !== 'admin') return;
            showModal('Permanently Delete Waiter', `This will permanently delete ${sanitizeInput(userName)} and all their associated sales history. This action cannot be undone. Are you absolutely sure?`, async () => {
                try {
                    // Optionally, reassign sales to a generic "deleted user" or mark them.
                    // For now, we'll proceed with deletion as per request.
                    await deleteDoc(doc(db, "users", userId));
                    showModal('Success', `${sanitizeInput(userName)} has been permanently deleted.`, () => true, false);
                    return true;
                } catch (error) {
                    console.error("Error permanently deleting user:", error);
                    showModal('Error', `Failed to permanently delete user: ${error.message}.`, () => true, false);
                    return false;
                }
            });
        }
        function handleRestoreUser(db, userId) {
            if (window.state.currentUser.role !== 'admin') return;
            showModal('Confirm Restore', 'Are you sure you want to restore this user?', async () => {
                try {
                    await updateDoc(doc(db, "users", userId), { isDeleted: false });
                    showModal('Success', 'User restored successfully!', () => true, false);
                    return true;
                } catch (error) {
                    console.error("Error restoring user:", error);
                    showModal('Error', `Failed to restore user: ${error.message}.`, () => true, false);
                    return false;
                }
            });
        }
        function promptResetPassword(db, userId, userName) {
            if (window.state.currentUser.role !== 'admin') return;
            const content = `<div><label>New Temporary Password for ${sanitizeInput(userName)}</label><input type="text" id="new-temp-password" class="mt-1 w-full p-2 bg-gray-700 rounded-md"></div><p id="resetPwError" class="text-red-400 hidden"></p>`;
            showModal('Reset Waiter Password', content, async () => {
                const newPassword = document.getElementById('new-temp-password').value.trim(); // Get raw password for hashing
                const errorP = document.getElementById('resetPwError');
                if (!newPassword || newPassword.length < 4) {
                    errorP.textContent = 'Password must be at least 4 characters.';
                    errorP.classList.remove('hidden');
                    return false;
                }
                try {
                    const hashedPassword = await hashPassword(newPassword); // Hash the new password
                    await updateDoc(doc(db, "users", userId), { password: hashedPassword }); // Store hashed password
                    showModal('Success', `Password for ${sanitizeInput(userName)} has been reset.`, () => true, false);
                    return true;
                } catch (error) {
                    console.error("Error resetting waiter password:", error);
                    showModal('Error', `Failed to reset password: ${error.message}.`, () => true, false);
                    return false;
                }
            });
        }

        async function handleSaveSettings(db) {
            const businessName = sanitizeInput(document.getElementById('business-name').value.trim());
            const mpesaTill = sanitizeInput(document.getElementById('mpesa-till').value.trim());

            if (!businessName) {
                showUserError('till-error', 'Business name cannot be empty.');
                return;
            }

            try {
                await updateDoc(doc(db, "businesses", window.state.currentUser.businessId), { name: businessName, mpesaTill });
                showModal('Success', 'Settings saved!', () => true, false);
            } catch (error) {
                console.error("Error saving settings:", error);
                showModal('Error', `Failed to save settings: ${error.message}.`, () => true, false);
            }
        }
        function promptChangePassword(auth) {
            if (window.state.currentUser.role === 'admin') {
                const user = auth.currentUser;
                if (!user) {
                    showModal('Error', 'No authenticated user found.', () => true, false);
                    return;
                }
                showModal('Change Admin Password', 'A password reset link will be sent to your registered email. Proceed?', async () => {
                    try {
                        await sendPasswordResetEmail(auth, user.email);
                        showModal('Check Your Email', `A password reset link has been sent to ${user.email}.`, () => true, false);
                        return true;
                    } catch (err) {
                        showModal('Error', `Could not send reset email. ${getAuthErrorMessage(err.code)}`, () => true, false);
                        return false;
                    }
                });
            } else { // Waiter password change
                const content = `<div><label>Current Password</label><input type="password" id="current-pw" class="w-full p-2 bg-gray-700 rounded-md"></div><div class="mt-2"><label>New Password</label><input type="password" id="new-pw" class="w-full p-2 bg-gray-700 rounded-md"></div><p id="pw-error" class="text-red-400 hidden"></p>`;
                showModal('Change Waiter Password', content, async () => {
                    const currentPw = document.getElementById('current-pw').value;
                    const newPw = document.getElementById('new-pw').value;
                    const errorP = document.getElementById('pw-error');

                    try {
                        const hashedCurrentPw = await hashPassword(currentPw);
                        if(window.state.currentUser.password !== hashedCurrentPw) { // Compare with stored hashed password
                            errorP.textContent = 'Current password is incorrect.';
                            errorP.classList.remove('hidden');
                            return false;
                        }
                        if(newPw.length < 4) {
                            errorP.textContent = 'New password must be at least 4 characters.';
                            errorP.classList.remove('hidden');
                            return false;
                        }
                        const hashedNewPw = await hashPassword(newPw);
                        await updateDoc(doc(db, "users", window.state.currentUser.id), { password: hashedNewPw });
                        showModal('Success', 'Password updated successfully.', () => true, false);
                        return true;
                    } catch (error) {
                        console.error("Error changing waiter password:", error);
                        showModal('Error', `Failed to update password: ${error.message}.`, () => true, false);
                        return false;
                    }
                });
            }
        }

        function handleRequestDeactivation(db) {
            showModal(
                'Confirm Deactivation Request',
                'Are you sure you want to request deactivation? An admin will need to approve this action. Your account will be unusable until then.',
                async () => {
                    const userId = window.state.currentUser.id;
                    try {
                        await updateDoc(doc(db, "users", userId), { deactivationRequested: true });
                        showModal('Request Sent', 'Your deactivation request has been sent to the admin for review.', () => true, false);
                        handleLogout(auth); // Log out the waiter immediately
                        return true;
                    } catch (error) {
                        console.error("Error requesting deactivation:", error);
                        showModal('Error', `Failed to send deactivation request: ${error.message}.`, () => true, false);
                        return false;
                    }
                }
            );
        }
        function promptClearTransactions(db) {
            const content = `<p class="mb-4 text-gray-300">This action will permanently delete all sales and shifts for your business. It cannot be undone.</p><p class="mb-2 font-semibold text-yellow-400">To confirm, please type "DELETE" in the box below.</p><input type="text" id="delete-confirm-input" class="mt-1 block w-full border p-2 uppercase bg-gray-700 border-gray-600 rounded-md" autocomplete="off">`;
            showModal('Confirm Data Deletion', content, async () => {
                const confirmInput = document.getElementById('delete-confirm-input');
                if (confirmInput.value === 'DELETE') {
                    const businessId = window.state.currentUser.businessId;
                    const salesQuery = query(collection(db, "sales"), where("businessId", "==", businessId));
                    const shiftsQuery = query(collection(db, "shifts"), where("businessId", "==", businessId));

                    try {
                        const salesSnapshot = await getDocs(salesQuery);
                        const shiftsSnapshot = await getDocs(shiftsQuery);
                        const batch = writeBatch(db);
                        salesSnapshot.forEach(doc => batch.delete(doc.ref));
                        shiftsSnapshot.forEach(doc => batch.delete(doc.ref));
                        await batch.commit();
                        showModal('Success', 'All transactional data for your business has been cleared.', () => true, false);
                        return true;
                    } catch (error) {
                        console.error("Error clearing transactions:", error);
                        showModal('Error', `Failed to clear transactions: ${error.message}.`, () => true, false);
                        return false;
                    }
                }
                showModal('Confirmation Failed', 'You must type "DELETE" to confirm.', () => true, false);
                return false;
            });
        }
        function setupLoginTabs() {
            const tabs = [adminLoginTab, signupTab, waiterLoginTab];
            const sections = [adminLoginFormSection, signupFormSection, waiterLoginFormSection];
            tabs.forEach((tab, index) => {
                tab.addEventListener('click', () => {
                    tabs.forEach(t => t.classList.remove('active'));
                    sections.forEach(s => s.classList.remove('active'));
                    tab.classList.add('active');
                    sections[index].classList.add('active');
                });
            });
        }

        // --- REPORTING LOGIC ---
        function showReportFeedback(message, type = 'info') {
            reportFeedbackDiv.textContent = message;
            reportFeedbackDiv.className = 'text-center p-2 rounded-md my-4';
            if (type === 'success') {
                reportFeedbackDiv.classList.add('bg-green-200', 'text-green-800');
            } else if (type === 'error') {
                reportFeedbackDiv.classList.add('bg-red-200', 'text-red-800');
            } else if (type === 'loading') {
                reportFeedbackDiv.classList.add('bg-blue-200', 'text-blue-800');
            }
            reportFeedbackDiv.classList.remove('hidden');
        }
        function handleGenerateReport(range = null) {
            const startDateInput = document.getElementById('report-start-date');
            const endDateInput = document.getElementById('report-end-date');
            let startDate, endDate;
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            if (range === 'daily') {
                startDate = today;
                endDate = new Date();
                endDate.setHours(23, 59, 59, 999);
            } else if (range === '90days') {
                endDate = new Date();
                endDate.setHours(23, 59, 59, 999);
                startDate = new Date();
                startDate.setDate(today.getDate() - 90);
                startDate.setHours(0, 0, 0, 0);
            } else {
                if (!startDateInput.value || !endDateInput.value) {
                    showReportFeedback('Please select both a start and end date for a custom report.', 'error');
                    return;
                }
                startDate = new Date(startDateInput.value);
                startDate.setHours(0, 0, 0, 0);
                endDate = new Date(endDateInput.value);
                endDate.setHours(23, 59, 59, 999);
            }
            if (startDate > endDate) {
                showReportFeedback('Start date cannot be after the end date.', 'error');
                return;
            }
            showReportFeedback('Generating report...', 'loading');
            document.querySelectorAll('.report-btn').forEach(btn => btn.disabled = true);
            downloadOptions.classList.add('hidden');

            // Use a timeout to simulate a loading state for better UX
            setTimeout(() => {
                try {
                    const salesInRange = window.state.sales.filter(sale => {
                        // Ensure sale.date exists and is a Firestore Timestamp object
                        if (!sale.date || !sale.date.seconds) return false;
                        const saleDate = new Date(sale.date.seconds * 1000); // Convert Firestore timestamp to JS Date
                        return saleDate >= startDate && saleDate <= endDate;
                    });

                    const shiftsInRange = window.state.shifts.filter(shift => {
                        const shiftStart = new Date(shift.start);
                        const shiftEnd = shift.end ? new Date(shift.end) : new Date(); // If shift still open, use current time
                        return shiftStart <= endDate && shiftEnd >= startDate; // Shift must overlap with the report period
                    }
                    );

                    if (salesInRange.length === 0) {
                        showReportFeedback('No sales data found for the selected period.', 'info');
                        reportOutputDiv.innerHTML = '<p>No results.</p>';
                        window.state.generatedReport = null;
                        document.querySelectorAll('.report-btn').forEach(btn => btn.disabled = false);
                        aiInsightText.textContent = "No data to analyze. Try expanding your date range.";
                        return;
                    }

                    const totalRevenue = salesInRange.reduce((sum, sale) => sum + sale.total, 0);
                    const totalSales = salesInRange.length;

                    const salesByWaiter = salesInRange.reduce((acc, sale) => {
                        acc[sanitizeInput(sale.waiterName)] = (acc[sanitizeInput(sale.waiterName)] || 0) + sale.total;
                        return acc;
                    }, {});
                    const bestSellingWaiter = Object.entries(salesByWaiter).sort(([,a],[,b]) => b-a)[0] || ['N/A', 0];

                    const waiterHours = shiftsInRange.reduce((acc, shift) => {
                        const start = new Date(shift.start);
                        const end = shift.end ? new Date(shift.end) : new Date();
                        const hours = (end - start) / (1000 * 60 * 60);
                        acc[sanitizeInput(shift.waiterName)] = (acc[sanitizeInput(shift.waiterName)] || 0) + hours;
                        return acc;
                    }, {});

                    const productSales = salesInRange.flatMap(sale => sale.items).reduce((acc, item) => {
                        if (!acc[sanitizeInput(item.name)]) {
                            acc[sanitizeInput(item.name)] = { quantity: 0, revenue: 0 };
                        }
                        acc[sanitizeInput(item.name)].quantity += item.quantity;
                        acc[sanitizeInput(item.name)].revenue += item.quantity * item.price;
                        return acc;
                    }, {});
                    const sortedProducts = Object.entries(productSales).sort(([,a], [,b]) => b.revenue - a.revenue);

                    window.state.generatedReport = {
                        startDate: startDate.toLocaleDateString(),
                        endDate: endDate.toLocaleDateString(),
                        totalRevenue,
                        totalSales,
                        bestSellingWaiter: { name: bestSellingWaiter[0], total: bestSellingWaiter[1] },
                        waiterHours,
                        sortedProducts,
                        salesData: salesInRange,
                    };

                    renderReportOutput(window.state.generatedReport);
                    generateAiInsight(window.state.generatedReport);
                    showReportFeedback(`Report generated successfully for ${startDate.toLocaleDateString()} to ${endDate.toLocaleDateString()}`, 'success');
                    document.querySelectorAll('.report-btn').forEach(btn => btn.disabled = false);
                    downloadOptions.classList.remove('hidden');
                } catch (error) {
                    console.error("Error generating report:", error);
                    showReportFeedback('An error occurred while generating the report.', 'error');
                    document.querySelectorAll('.report-btn').forEach(btn => btn.disabled = false);
                }
            }, 1000);
        }

        function renderReportOutput(reportData, forPrinting = false) {
            const container = forPrinting ? printArea : reportOutputDiv;
            if (!reportData) {
                container.innerHTML = '<p>No report data to display.</p>';
                return;
            }

            const waiterHoursHtml = Object.entries(reportData.waiterHours)
                .map(([name, hours]) => `<li><strong>${sanitizeInput(name)}:</strong> ${hours.toFixed(1)} hours</li>`).join('');
            const productSalesHtml = reportData.sortedProducts
                .map(([name, data]) => `<tr><td class="py-2 px-2 border-b border-gray-700">${sanitizeInput(name)}</td><td class="text-center py-2 px-2 border-b border-gray-700">${data.quantity}</td><td class="text-right py-2 px-2 border-b border-gray-700">Ksh ${data.revenue.toFixed(2)}</td></tr>`).join('');

            const printStyles = forPrinting ? `<style>
                body { font-family: Arial, sans-serif; color: #000; margin: 20px; }
                .print-header { text-align: center; margin-bottom: 20px; }
                .summary-card { border: 1px solid #ccc; padding: 10px; margin-bottom: 15px; }
                table { width: 100%; border-collapse: collapse; margin-top: 15px; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                th { background-color: #f2f2f2; }
                h1, h2, h3, h4 { margin: 5px 0; }
                .grid { display: block; } /* Remove grid layout for print */
                .stat-card { border: 1px solid #ddd; margin-bottom: 10px; padding: 10px; }
                </style>` : '';

            const headerContent = `<div class="${forPrinting ? 'print-header' : ''}"><h2 class="text-2xl font-bold">${forPrinting ? sanitizeInput(window.state.settings.name) + ' Report' : 'Report Summary'}</h2><p class="text-sm text-gray-400">For period: ${reportData.startDate} to ${reportData.endDate}</p></div>`;
            container.innerHTML = `
                ${printStyles}
                ${headerContent}
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 my-6">
                    <div class="stat-card"><h4 class="font-semibold text-gray-400">Total Revenue</h4><p class="text-3xl font-bold text-green-400 mt-2">Ksh ${reportData.totalRevenue.toFixed(2)}</p></div>
                    <div class="stat-card"><h4 class="font-semibold text-gray-400">Total Transactions</h4><p class="text-3xl font-bold text-blue-400 mt-2">${reportData.totalSales}</p></div>
                    <div class="stat-card"><h4 class="font-semibold text-gray-400">Top Performer</h4><p class="text-2xl font-bold text-yellow-400 mt-2">${sanitizeInput(reportData.bestSellingWaiter.name)}</p><span class="text-sm text-gray-400">Ksh ${reportData.bestSellingWaiter.total.toFixed(2)} in sales</span></div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                    <div class="stat-card"><h4 class="font-semibold text-gray-300 mb-2">Staff Hours</h4><ul class="list-disc list-inside space-y-1">${waiterHoursHtml || '<li>No shift data</li>'}</ul></div>
                    <div class="stat-card"><h4 class="font-semibold text-gray-300 mb-2">Top Selling Products</h4><div class="overflow-x-auto"><table class="w-full text-sm"><thead><tr><th class="text-left py-2 px-2">Product</th><th class="text-center py-2 px-2">Qty Sold</th><th class="text-right py-2 px-2">Revenue</th></tr></thead><tbody>${productSalesHtml}</tbody></table></div></div>
                </div>`;
        }

        function handleDownloadReport(type) {
            if (!window.state.generatedReport) {
                showReportFeedback('Please generate a report first.', 'error');
                return;
            }

            const btn = type === 'summary' ? downloadSummaryBtn : downloadFullBtn;
            btn.disabled = true;
            showReportFeedback(`Preparing ${type} download...`, 'loading');
            setTimeout(() => {
                try {
                    const report = window.state.generatedReport;
                    let csvContent = "data:text/csv;charset=utf-8,";

                    if (type === 'summary') {
                        csvContent += `Sales Summary for ${sanitizeInput(window.state.settings.name)}\r\n`;
                        csvContent += `Period,"${report.startDate} to ${report.endDate}"\r\n\r\n`;
                        csvContent += `Metric,Value\r\n`;
                        csvContent += `Total Revenue,${report.totalRevenue.toFixed(2)}\r\n`;
                        csvContent += `Total Transactions,${report.totalSales}\r\n`;
                        csvContent += `Best Selling Waiter,"${sanitizeInput(report.bestSellingWaiter.name)} (Ksh ${report.bestSellingWaiter.total.toFixed(2)})"\r\n\r\n`;
                        csvContent += `Waiter,Hours Worked\r\n`;
                        Object.entries(report.waiterHours).forEach(([name, hours]) => {
                            csvContent += `"${sanitizeInput(name)}",${hours.toFixed(2)}\r\n`;
                        });
                        csvContent += `\r\nTop Selling Products\r\nProduct,Quantity Sold,Revenue\r\n`;
                        report.sortedProducts.forEach(([name, data]) => {
                            csvContent += `"${sanitizeInput(name)}",${data.quantity},${data.revenue.toFixed(2)}\r\n`;
                        });

                    } else { // Full report
                        csvContent += `Full Sales Report for ${sanitizeInput(window.state.settings.name)}\r\n`;
                        csvContent += `Period,"${report.startDate} to ${report.endDate}"\r\n\r\n`;
                        csvContent += "Sale ID,Date,Time,Waiter,Total,Payment Method,Transaction Code,Items\r\n";
                        report.salesData.forEach(sale => {
                            const saleDate = new Date(sale.date.seconds * 1000);
                            const date = saleDate.toLocaleDateString();
                            const time = saleDate.toLocaleTimeString();
                            // Sanitize items list for CSV, handle commas within item names
                            const items = sale.items.map(i => `${i.quantity}x ${sanitizeInput(i.name).replace(/"/g, '""')}`).join('; ');
                            csvContent += `"${sanitizeInput(sale.id)}","${date}","${time}","${sanitizeInput(sale.waiterName)}",${sale.total},"${sanitizeInput(sale.paymentMethod)}","${sanitizeInput(sale.transactionCode)}","${items}"\r\n`;
                        });
                    }
                    const encodedUri = encodeURI(csvContent);
                    const link = document.createElement("a");
                    link.setAttribute("href", encodedUri);
                    link.setAttribute("download", `BarSoko_${type}_Report_${report.startDate.replace(/\//g, '-')}_to_${report.endDate.replace(/\//g, '-')}.csv`);
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);

                    showReportFeedback('Download successful!', 'success');
                } catch (error) {
                    console.error("Error downloading report:", error);
                    showReportFeedback('Failed to download report.', 'error');
                } finally {
                    btn.disabled = false;
                }
            }, 500);
        }

        function handlePrintReport() {
            if (!window.state.generatedReport) {
                showReportFeedback('Please generate a report first.', 'error');
                return;
            }
            renderReportOutput(window.state.generatedReport, true);
            window.print();
        }

        async function generateAiInsight(report) {
            if (!report || window.state.currentUser.role !== 'admin') {
                aiInsightText.textContent = "Generate a report to get AI-powered business insights.";
                return;
            }

            const prompt = `Based on the following sales report data, provide 1-2 concise, actionable business insights. Focus on trends, top performers, or areas for improvement.

            Report Summary:
            Total Revenue: Ksh ${report.totalRevenue.toFixed(2)}
            Total Transactions: ${report.totalSales}
            Best Selling Waiter: ${report.bestSellingWaiter.name} (Ksh ${report.bestSellingWaiter.total.toFixed(2)})
            Top Selling Products: ${report.sortedProducts.slice(0, 3).map(p => `${p[0]} (Qty: ${p[1].quantity}, Rev: Ksh ${p[1].revenue.toFixed(2)})`).join(', ')}
            Period: ${report.startDate} to ${report.endDate}

            Provide a maximum of 2 bullet points, each a single sentence.`;

            try {
                const payload = {
                    contents: [{ role: "user", parts: [{ text: prompt }] }],
                    generationConfig: {
                        temperature: 0.7,
                        maxOutputTokens: 100
                    }
                };
                const apiKey = "AIzaSyAy7yTBeqFL0uDcl_TS2Yc2wpOPwIlkKFU"; // Canvas will provide
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    throw new Error(`API error: ${response.status} ${response.statusText}`);
                }

                const result = await response.json();
                if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {
                    const aiResponseText = result.candidates[0].content.parts[0].text;
                    aiInsightText.innerHTML = sanitizeInput(aiResponseText);
                    aiInsightsBar.classList.remove('hidden');
                } else {
                    aiInsightText.textContent = "AI insights unavailable.";
                    console.warn("AI insight response missing content:", result);
                }
            } catch (error) {
                console.error("Error generating AI insight:", error);
                aiInsightText.textContent = "Failed to generate AI insights.";
            }
        }


        // --- APP START ---
        document.addEventListener('DOMContentLoaded', async () => {
            console.log("BarSoko POS Multi-Tenant MVP Initializing...");

            try {
                await enableMultiTabIndexedDbPersistence(db);
                firestoreStatusDiv.textContent = 'Offline Mode Ready';
                firestoreStatusDiv.className += ' bg-green-500 text-green-900'; // Change to green for success
            } catch (err) {
                if (err.code == 'failed-precondition') {
                    firestoreStatusDiv.textContent = 'Offline sync active in another tab.';
                    firestoreStatusDiv.className += ' bg-yellow-500 text-yellow-900';
                } else if (err.code == 'unimplemented') {
                    firestoreStatusDiv.textContent = 'Offline mode not supported by browser.';
                    firestoreStatusDiv.className += ' bg-red-500 text-white';
                } else {
                    firestoreStatusDiv.textContent = `Offline mode error: ${err.message}`; // More specific error
                    firestoreStatusDiv.className += ' bg-red-500 text-white';
                }
                console.error("Firestore Persistence Error:", err);
            }

            listenForAuthChanges(auth, db);
            setupLoginTabs();

            // Separate Google sign-in buttons for clarity and distinct flows
            const googleSignupBtn = document.getElementById('google-signup-btn');
            if (googleSignupBtn) {
                googleSignupBtn.addEventListener('click', () => handleGoogleAuth(auth, db, 'signup'));
            }
            const googleAdminSignInBtn = document.getElementById('google-admin-signin-btn');
            if (googleAdminSignInBtn) {
                googleAdminSignInBtn.addEventListener('click', () => handleGoogleAuth(auth, db, 'admin'));
            }

            adminLoginForm.addEventListener('submit', (e) => handleAdminLogin(e, auth));
            signupForm.addEventListener('submit', (e) => handleSignUp(e, auth, db));
            waiterLoginForm.addEventListener('submit', (e) => handleWaiterLogin(e, db));
            forgotPasswordLink.addEventListener('click', (e) => handleForgotPassword(e, auth));
            logoutBtn.addEventListener('click', () => handleLogout(auth));

            document.getElementById('waiter-business-id').addEventListener('blur', (e) => {
                populateWaiterSelectForBusiness(e.target.value.trim());
            });
        });
    </script>
</body>
</html>
